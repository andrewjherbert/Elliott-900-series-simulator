
on
telecode 903
at ptr file ..\HUNTER\ALG16KLG(HUNTER).BIN
j 8181
st 5124
de ptp
at ptr inline
bessel;
"begin"
   "comment" 15-APR-1997;
   "integer" j,k,l,m;
   "real" eps, eta;
   "array" y,y2[1:2];

   "procedure" deriv(t,y,n,z);
      "value" t,n;
      "real" t; "array" y,z; "integer" n;
   "begin"
      z[1] := y[2];
      z[2] := "if" abs(t) < 0.0001 
               "then" -1 "else" -y[2]/t - y[1];
   "end" of deriv;

   "procedure" rk(x,y,n,fkt,eps,eta,xe,ye,fi);
      "value" x,n,eps,eta,xe,fi;
      "integer" n; "boolean" fi;
      "real" x,eps,eta,xe; "array" y,ye;
      "procedure" fkt;

   "comment" Algorithm 9 in Collections CACM, also see
             example in Algol Report 1960. Note that this
             version is in a single-case alphabet, and that
             as many scalar parameters as possible are
             called by value;

   "begin"
      "array" z,y1,y2,y3[1:n];
      "real" x1,x2,x3,h,hs;
      "integer" k,j,s;
      "boolean" out;

      "comment" s and hs are supposed to be own variables, but
                in 903 Algol all locals are treated as own. Also
                note that s has been made integer as Thacher 
                recommends;

      "real" "procedure" comp(a,b,c);
         "value" a,b,c;
         "real"  a,b,c;

      "comment" This is from H.C. Thacher's certification
                of Algorithm 9, July 1964, Nov. 1965. It
                should be in assembly code;
      "begin"
         "integer" ae,be,ce;

         "integer" "procedure" expon(x);
            "value" x;
            "real"  x;
            expon := "if" x=0 
                        "then" -22
                        "else" entier(0.43429448*ln(abs(x))+1);

            "comment" -22 is smaller than -18, the exponent of
                      the smallest no. in 903 Algol (decimal
                      exponents);

         ae := expon(a);
         be := expon(b);
         ce := expon(c);
         "if" ae < be "then" ae := be;
         "if" ae < ce "then" ae := ce;
         comp := abs(a-b)/10^ae
      "end" of comp;

      "procedure" rk1st(x,y,h,xe,ye);
         "value" x,h;
         "real" x,h,xe; "array" y,ye;
      "begin"
         "array" w[1:n],a[1:5];
         "integer" k,j;
         a[1] := a[2] := a[5] := h/2;
         a[3] := a[4] := h;
         xe := x;
         "for" k := 1 "step" 1 "until" n "do" 
                         ye[k] := w[k] := y[k];
         "for" j := 1 "step" 1 "until" 4 "do"
         "begin"
            "comment" In 903 Algol there is a local convention -
                      in formal procedures like fkt the parameters
                      called by value, ie xe and n, must be 
                      surrounded by brackets, and the ones
                      called by name, ie w and z, must not be; 
            fkt((xe),w,(n),z);
            xe := x + a[j];
            "for" k := 1 "step" 1 "until" n "do"
            "begin"
               w[k]  := y[k]  + a[j]   * z[k];
               ye[k] := ye[k] + a[j+1] * z[k] /3
            "end" of k
         "end" of j
      "end" of rk1st;

      "comment" start of rk;

      "if" fi "then"
      "begin"
         h := xe - x;
         s := 0
      "end" "else" h := hs;

      out := "false";
AA:
      "if" (x + 2.01 * h - xe > 0) "equiv" (h > 0) "then"
      "begin"
         hs := h;
         out := "true";
         h := (xe - x) / 2
      "end" of if;

      rk1st(x,y,2*h,x1,y1);
BB:
      rk1st(x,y,h,x2,y2);
      rk1st(x2,y2,h,x3,y3);
      "for" k := 1 "step" 1 "until" n "do"
         "if" comp(y1[k],y3[k],eta) > eps "then" "goto" CC;
      x := x3;
      "if" out "then" "goto" DD;

      "for" k := 1 "step" 1 "until" n "do" y[k] := y3[k];

      "if" s = 5 "then"
      "begin"
         s := 0;
         h := 2 * h
      "end";
      s := s + 1; 
      "goto" AA;
CC:
      h := 0.5 * h;
      out := "false";
      x1 := x2;
      "for" k := 1 "step" 1 "until" n "do" y1[k] := y2[k];
      "goto" BB;
DD:
      "for" k := 1 "step" 1 "until" n "do" ye[k] := y3[k]
   "end" of RK, SEP-78, DGNH;

   "read" y[1], y[2], eps, eta, k, l, m;
   "print" ''ls3`t's8`j0(t)'l``;
   j := k;
again:
   "print" aligned(1,1), j/10, same line, '   `,
           aligned(1,7), y[1];
   "if" j > l "then" stop;
   rk(j/10, y, 2, deriv, eps,eta,(j+m)/10,y2,j=k);
   y[1] := y2[1]; 
   y[2] := y2[2];
   j := j+m;
   "goto" again
"end"
   1   0   ?-6   ?-6   0   11   2
<!!>
j 12
st 7943
select out tty
j 10
st 1727




