   OPASC
   IPBIN
   ^8273
   8  86
   ADLIB
   JUMP 12
   IPASC

hartree;
"begin"
   "comment" Originally written 
       on 20-FEB-1998, but corrected
       on 14-OCT-1999.
       Phil. Trans. Roy. Soc. Vol. 241,
       1948, pp 1..70. 
       The Laminar Boundary Layer in
       Compressible Flow.
       W.F. Cope and D.R. Hartree.

       See also:

       The ENIAC, an Electronic Computing Machine,
       Prof. D.R. Hartree
       Nature Vol. 158, Oct. 12 1946

       Calculating Instruments and Machines,
       Prof. D.R. Hartree
       The University of Illinois Press, 1949
       Page 88, but the equations given below
       are taken from Phil. Trans. Roy. Soc.

       f'  = h / (1 + ar)^(1 - b)
       h'' = -fh'
       (1/sigma)*r'' + 0.25*(gamma-1)*(h')^2 = - fr'

       f = h = r' = 0  at x = 0
       h = 2,   r = 0  at x = 5

       Here y[1] = f 
            y[2] = h 
            y[3] = r
            y[4] = h' 
            y[5] = r';

   "integer" count, i, j, k, kind,
             l, m, run, steps;
   "real"    a, b, eps, eta, gamma, 
             iR, idH, sigma, tol;
   "array"   y, y2[1:5];

   "procedure" deriv(t, y, n, z);
      "real" t; "array" y, z; "integer" n;
   "begin"
      z[1] := y[2] / exp(ln(1 + a * y[3]) * (1 - b));
      z[2] := y[4];
      z[3] := y[5];
      z[4] := - y[1] * y[4];
      z[5] := - (0.25 * (gamma - 1) * y[4]^2 +
                 y[1] * y[5]) * sigma
   "end" of deriv;

   "procedure" rk(x, y, n, fkt, eps, eta, xe, ye, fi);
      "comment" This is Thacher's certification of RK,
                with n, eps, eta xe and fi as extra things
                on the "value" list;
      "value"     x, n, eps, eta, xe, fi;
      "integer"   n; 
      "boolean"   fi;
      "real"      x, eps, eta, xe;
      "array"     y, ye;
      "procedure" fkt;

   "comment" Algorithm 9 in Collections CACM, also see
             example in Algol Report 1960. Note that this
             version is in a single-case alphabet, and that
             as many scalar parameters as possible are
             called by value (see above);

   "begin"
      "array"   z, y1, y2, y3[1:n];
      "real"    x1, x2, x3, h, hs;
      "integer" k, j, s;
      "boolean" out;

      "comment" s and hs are supposed to be own variables, but
                in 903 Algol all locals are treated as own. Also
                note that s has been made integer as Thacher 
                recommends;

      "real" "procedure" comp(a, b, c);
         "value" a, b, c;
         "real"  a, b, c;

      "comment" This is from H.C. Thacher's certification
                of Algorithm 9, July 1964, Nov. 1965. It
                should be in assembly code;
      "begin"
         "integer" ae, be, ce;

         "integer" "procedure" expon(x);
            "value" x;
            "real"  x;
            expon := "if" x=0 
                     "then" -22
                     "else" entier(0.43429448 * ln(abs(x)) + 1);

            "comment" -22 is smaller than -18, the exponent of
                      the smallest no. in 903 Algol (decimal
                      exponents);

         ae := expon(a);
         be := expon(b);
         ce := expon(c);
         "if" ae < be "then" ae := be;
         "if" ae < ce "then" ae := ce;
         comp := abs(a - b)/10^ae
      "end" of comp;

      "procedure" rk1st(x, y, h, xe, ye);
         "value" x, h;
         "real"  x, h, xe;
         "array" y, ye;
      "begin"
         "array"   w[1:n], a[1:5];
         "integer" k, j;
         a[1] := a[2] := a[5] := h/2;
         a[3] := a[4] := h;
         xe := x;
         "for" k := 1 "step" 1 "until" n "do" 
                         ye[k] := w[k] := y[k];
         "for" j := 1 "step" 1 "until" 4 "do"
         "begin"
            "comment" In 903 Algol there is a local convention -
                      in formal procedures like fkt the parameters
                      called by value must be surrounded by
                      brackets, and the ones called by name must
                      not be. Actually these are all called by name
                      so there are no extra brackets; 
            fkt(xe, w, n, z);
            xe := x + a[j];
            "for" k := 1 "step" 1 "until" n "do"
            "begin"
               w[k]  := y[k]  + a[j]   * z[k];
               ye[k] := ye[k] + a[j+1] * z[k] /3
            "end" of k
         "end" of j
      "end" of rk1st;

      "comment" start of rk;

      "if" fi "then"
      "begin"
         h := xe - x;
         s := 0
      "end" "else" h := hs;

      out := "false";
AA:
      "if" (x + 2.01 * h - xe > 0) "equiv" (h > 0) "then"
      "begin"
         hs := h;
         out := "true";
         h := (xe - x) / 2
      "end";

      rk1st(x, y, 2*h, x1, y1);
BB:
      rk1st(x,  y,  h, x2, y2);
      rk1st(x2, y2, h, x3, y3);
      "for" k := 1 "step" 1 "until" n "do"
         "if" comp(y1[k], y3[k], eta) > eps "then" "goto" CC;
      x := x3;
      "if" out "then" "goto" DD;

      "for" k := 1 "step" 1 "until" n "do" y[k] := y3[k];

      "if" s = 5 "then"
      "begin"
         s := 0;
         h := 2 * h
      "end";
      s := s + 1; 
      "goto" AA;
CC:
      h := 0.5 * h;
      out := "false";
      x1 := x2;
      "for" k := 1 "step" 1 "until" n "do" y1[k] := y2[k];
      "goto" BB;
DD:
      "for" k := 1 "step" 1 "until" n "do" ye[k] := y3[k]
   "end" of RK, SEP-1978, DGNH;

   "procedure" init(r, dh);
      "value" r, dh; 
      "real"  r, dh;
   "begin"
      y[1] := 0.0;
      y[2] := 0.0;
      y[3] := r;
      y[4] := dh;
      y[5] := 0.0;
   "end";

   "procedure" evaluate(quiet);
      "value"   quiet;
      "boolean" quiet;
   "begin"
      "integer" i, j, k, m;
      m := (500 "div" steps);
      "for" k := 0 "step" 1 "until" (steps-1) "do"
      "begin"
         j := k * m;
         "if" "not" quiet "then"
         "begin"
            "if" (kind = 2) "or" (kind = 4) "then"
            "print" aligned(1,1), ' @, j/100, same line, '    @,
                    aligned(2,5),'  @, y[1],
                                 '  @, y[4],
                                 '  @, y[2],
                                 '  @, y[5],
                                 '  @, y[3]
         "end";
         rk((j/100), y, 5, deriv, eps, eta, ((j+m)/100), y2, j=0);
         "for" i := 1 "step" 1 "until" 5 "do" y[i] := y2[i]
      "end";
      "if" "not" quiet "then"
      "begin"
         "if" (kind = 2) "or" (kind = 4) "then"
            "print" aligned(1,1), ' @, j/100, same line, '    @,
                    aligned(2,5),'  @, y[1],
                                 '  @, y[4],
                                 '  @, y[2],
                                 '  @, y[5],
                                 '  @, y[3]
      "end"
   "end";

   "procedure" CorrectInitVal;
   "begin"
      "real" dh, dr, 
             ia11, ia12, ia21, ia22;

      ia11 :=  0.169;
      ia12 :=  0.9996431 + 0.0002485 * a + 0.0000003 * a * a;
      ia21 :=  0.9856971 - 0.0088272 * a + 0.0001950 * a * a;
      ia22 := -0.058564  - 0.0367821 * a + 0.0008858 * a * a;

      "if" a = 0.0 "then"
      "begin"
         ia12 := 1.0; ia21 := 0.996; ia22 := 0.0
      "end";

      init(iR, idH);      
      evaluate("true");

      "comment" Calculate corrections dr, dh;
      dr := ia11 * (y[2] - 2.0) + ia12 * y[3];
      dh := ia21 * (y[2] - 2.0) + ia22 * y[3];
      
      "comment" Apply them;
      idH := idH - dh;
      iR := iR - dr
   "end";

   "comment" program start;

   eps := eta := 0.00001;
   b := 0.888888889;
   "comment"
    The ENIAC, an Electronic Computing Machine,
    Prof. D.R. Hartree,
    Nature Vol. 158, Oct. 12 1946
    also gives this value for b.
    It was fudge to avoid using ln and exp on ENIAC
    while calculating "something to the one nineth power";

   gamma := 1.4;
   "comment"
    Kaye and Labye
    14th Edition page 54
    gives a value 1.401 for the ratio of
    the specific heats for air;

   sigma := 0.715;
    "comment"
    See reference Trans. Phil. Roy. Soc.
    page 15. James Jeans says that
    the Prandl number (sigma) ought
    to be equal to (4 * gamma/(9 * gamma - 5))
    which is 0.737 when gamma is 1.4, but
    Hartree reckons that 0.715 is better 
    for air;

again:
   "read" run, kind, steps, tol, a, iR, idH;

   "print" ''L2@@, same line, digits(4), 
   'Run number : @, run, 
   ''L@Kind       : @, kind,
   ''L@Steps      : @, steps, aligned(3,7),
   ''L@Tol        : @, tol,
   ''L@Mach ^ 2   : @, a,
   ''L@Initial r  : @, iR,
   ''L@Initial h'Q@ : @, idH, ''L2@@; 
   count := 0;

cycle:

   count := count + 1;
   init(iR, idH);

   "if" kind = 1 "or" kind = 3 "then"
   "print" 'h'Q@(0), r(0) = @, aligned(3,7),idH, 
   same line, iR;

   CorrectInitVal; "print" '.@;

   "if" kind = 1 "or" kind = 3 "then"
   "print" ''LS33@@, aligned(3,7), y[2], same line, y[3];  

   "if"   count < 5 
   "and" (abs(2.0 - y[2]) > tol "or" abs(y[3]) > tol) 
      "then" "goto" cycle; 

   "if" count "ge" 5 "then" "print" ''L@No convergence@;

   init(iR, idH);

   "if" kind = 1 "or" kind = 3 "then"
   "print" ''L@h'Q@(0), r(0) = @, aligned(3,7), 
       idH, same line, iR
   "else"
      "print" ''LS3@X'S11@F'S10@H'QS9@H'S10@R'QS9@R'L@@;

   evaluate("false");

   "if" kind = 1 "or" kind = 3 "then"
      "print" ''LS33@@, aligned(3,7), y[2], same line, y[3];

   "if" (kind = 2) "or" (kind = 4) "then"
   "print" aligned(1,1), ''L@ 5.0@, same line, '    @,
           aligned(2,5),'  @, y[1],
                        '  @, y[4],
                        '  @, y[2],
                        '  @, y[5],
                        '  @, y[3];

   "if" kind > 2 "then" stop "else" "goto" again 
"end"

   22  4  10  0.001  20.0  0.17  1.3
