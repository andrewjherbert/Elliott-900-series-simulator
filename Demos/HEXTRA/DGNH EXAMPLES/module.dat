
    IPBIN
    OPASC
    JUMP 12
    IPASC

MODULE;
"begin"
   "comment" 30-SEP-1997; 

   "integer" addr,ck1,ck2,code,fun,j,k,L,lim,m,n,pp1,pp2;
   "integer" "array" p[1:100],a[1:10000];

   "procedure" inrlb(a); "integer" "array" a;
   "begin"
      "integer" j;
      "for" j:=1 "step" 1 "until" 10000 "do"
      "begin"
         "read" a[j];
         "if" a[j]=255 "then" "goto" finish
      "end";
finish:
   "end";

   "integer" "procedure" sum(a,k); "value" k; 
      "integer" "array" a; "integer" k; 
      sum:=a[k]+a[k+1]+a[k+2];

   "procedure" alter(a,k,dec); "value" k,dec;
      "integer" "array" a; "integer" k,dec;
   "begin"
      "integer" addr;
      addr:=(a[k+1]-(a[k+1] "div" 64)*64)*128+a[k+2];
      "if" addr "ne" 8191 "then" addr:=addr-dec;
      a[k+1]:=addr "div" 128 +(a[k+1] "div" 64)*64;
      a[k+2]:=addr -(addr "div" 128)*128
   "end" of alter;

   "switch" S:=L1,L2,L3,L4,L5,L6,L7;

   L:=-1;
   lim:=0; digits(3); same line;
   pp1:=pp2:=ck1:=ck2:=0; inrlb(a);
   "print" ''L@  0  0  0  0  0  0  0  0  0  0'L@@;
   "for" j:=1,j+1 "while" a[j]=0 "do"
   "begin"
      k:=j+1; a[j]:=-1
   "end" of for;   

loop:
   code:=a[k] "div" 16;
   "if" code=0 "then"
   "begin"
      a[k]:=a[k+1]:=a[k+2]:=-1;
      k:=k+3;
      "goto" loop
   "end" of if;

   ck1:=ck1+sum(a,k);
   "goto" S[code];

L1:
L2:
   "if" pp1<15 "then"
   "begin"
      a[k]:=a[k+1]:=a[k+2]:=-1;
      "goto" fin
   "end"
               "else"
   "begin"
      fun:=(a[k]-code*16)*2+a[k+1] "div" 64;

      "if" code=1 "and" (fun=9 "or" fun=10 "or" fun=27) "then"
         "print" ''L@labels and switches not allowed@, stop;

      "if" code=1 "and" fun=31 "and" a[k+2]=9 "then"
      "begin"
         ck1:=ck1+sum(a,k+6); alter(a,k+6,672);
         ck1:=ck1-sum(a,k+6); "goto" all
      "end";

      addr:=(a[k+1]-(a[k+1] "div" 64)*64)*128+a[k+2];
      "if" addr=8191 "then"
      "begin"
         L:=L+2;
         "if" L=101 "then" "print" ''L@too many arrays@, stop;
         p[L]:=pp1;
         p[L+1]:=k
      "end" of if;

      "if"   a[k+2]=16 "and"
           ((a[k+1]=64 "and" (a[k]=27 "or" a[k]=30)) "or"
            (a[k+1]=0  "and"  a[k]=30)) "then" "goto" all;

      "if" code=1 "and"
          (fun=5 "or"
           fun=11 "or"
           (fun>21 "and" fun<27) "or"
            fun=28 "or"
            fun=29) "then"
      "begin"
         alter(a,k,672); "goto" all
      "end" of if;

      "if" code=2 "then"
      "begin"
         alter(a,k,15); "goto" all
      "end" of if
   "end" of else;
   "goto" all;

L3:
   n:=-1;
   addr:=a[k+1]*128+a[k+2];
   ck1:=ck1+sum(a,k+3);
   "for" m:=1 "step" 2 "until" L "do"
   "begin"
      "if" addr=p[m] "then"
      "begin"
         m:=p[m+1];
         "if" a[k+3]=0 "then" n:=pp2 "else" "goto" easy;
         "goto" done
      "end"
   "end" of for;

done:
   "if" pp1<0 "or" n<0 "then" "goto" easy;
   "if" a[k+3]=0 "then" a[m]:=a[m]+16;
   a[m+1]:=(a[m+1] "div" 64)*64 + n "div" 128;
   a[m+2]:=n-(n "div" 128)*128;
easy:
   "for" j:=k "step" 1 "until" k+8 "do" a[j]:=-1;
   k:=k+9;
   "goto" loop;

   "comment" test for label QACODL;
L4:
   "if" a[k]=76 "and"
        a[k+1]=48 "and"
        a[k+2]=99 "and"
        a[k+3]=27 "and"
        a[k+4]=114 "and"
        a[k+5]=44 "then"
   "begin"
      "for" j:=k "step" 1 "until" k+11 "do" a[j]:=-1;
      k:=k+12;
      ck1:=ck1+185;
      pp1:=-1000;
      "goto" loop
   "end" of if;

   k:=k+3;
   ck1:=ck1+sum(a,k);
   code:=a[k] "div" 16;
   "if" code=2 "then"
   "begin"
      k:=k+3;
      ck1:=ck1+sum(a,k);
      pp1:=pp1+1;
      pp2:=pp2+1
   "end" of if;
   k:=k+6;
   "goto" join;

L5:
   "print" ''L@skip code error@, stop;

L6:
   ck1:=ck1-sum(a,k);
   "if" ck1 "ne" (((a[k]-(a[k] "div" 16)*16)*128)
                   +a[k+1])*128+a[k+2] 
   "then" "print" ''L@checksum error@, stop;
   ck1:=0;
   j:=k;
again:
   j:=j-1;
   "if" ck1=6 "then" "goto" output;
   "if" a[j] "ge" 0 "then"
   "begin"
      a[j]:=-1;
      ck1:=ck1+1
   "end";
   "goto" again;

output:
   "for" j:=1 "step" 1 "until" k-1 "do"
      ck2:=ck2+("if" a[j]>0 "then" a[j] "else" 0);
   a[k]:=(ck2 "div" 16384);
   a[k+1]:=(ck2-a[k]*16384) "div" 128;
   a[k+2]:=ck2-a[k]*16384-a[k+1]*128;
   a[k]:=a[k]+96;
   a[k+3]:=-2;

   "for" j:=1 "step" 1 "until" 10000 "do"
   "begin"
      "if" a[j]=-2 "then" 
      "begin"
         "print" ''L@  0  0  0  0  0  0  0  0 112 0  0'L@@;
         stop
      "end";

      "if" a[j] "ge" 0 "then"
      "begin"
         lim:=lim+1;
         "print" a[j];
         "if" lim=15 "then" 
         "begin"
            "print" ''L@@;
            lim:=0
         "end"
      "end"
   "end";
   "print" ''L@gloom, run out of store@;
   stop;

L7:
   "if" a[k]=112 "and" a[k+1]=0 "and" a[k+2]=15 "then"
   "begin"
      ck1:=ck1-127;
      ck2:=ck2-127;
      "goto" join
   "end" "else" "print" ''L@halt code error@, stop;

all:
   pp2:=pp2+1;
fin:
   pp1:=pp1+1;
join:
   k:=k+3;
   "goto" loop
"end"

0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 74 55 54 16 0 0 0 0 0 0
0 0 23 64 20 25 0 2 23 64 17 36 0 9 17 99 108 20 112 0 26 55 54
16 0 0 16 32 96 32 0 4 23 64 15 31 64 1 20 63 127 27 70 48 20
63 127 27 70 67 18 63 127 24 64 0 17 127 127 31 64 1 20 63 127
27 70 80 25 0 1 28 6 66 19 0 65 24 0 8 31 64 9 16 63 127 16 6
96 16 63 127 16 64 3 28 6 66 31 64 22 25 0 1 31 64 15 31 64 25
25 0 1 31 64 26 31 64 11 48 0 27 0 0 0 0 0 0 31 64 9 16 63 127
16 6 112 16 63 127 16 64 2 17 0 3 25 0 1 31 64 30 31 64 22 25
0 1 31 64 25 28 6 66 31 64 26 31 64 11 48 0 40 0 0 0 0 0 0 16
64 8 17 0 2 22 0 3 28 6 65 17 0 3 17 0 2 48 0 16 15 127 71 0 0
0 22 64 6 31 64 20 28 6 65 17 0 3 17 0 2 22 0 6 25 0 0 31 64 13
31 64 20 31 64 10 48 0 42 0 0 0 0 0 0 28 6 65 17 0 3 17 0 3 22
0 6 25 0 1 28 6 65 17 0 3 17 0 3 22 64 6 31 64 14 31 64 37 31
64 20 31 64 9 16 63 127 16 7 0 16 63 127 16 64 2 17 0 3 25 0 1
31 64 32 31 64 22 25 0 1 31 64 15 31 64 25 25 0 1 31 64 26 31
64 11 48 0 82 0 0 0 0 0 0 17 64 6 25 0 0 31 64 13 31 64 20 31
64 9 16 63 127 16 7 16 16 63 127 16 64 1 17 0 2 25 0 1 31 64 30
31 64 22 25 0 1 31 64 25 17 0 3 31 64 26 31 64 11 48 0 101 0 0
0 0 0 0 17 64 6 18 0 6 28 6 65 17 0 3 17 0 1 22 64 6 28 6 65 17
0 1 17 0 2 22 64 6 31 64 35 31 64 31 31 64 20 31 64 10 48 0 103
0 0 0 0 0 0 28 6 65 17 0 3 17 0 2 22 0 6 18 0 6 31 64 16 28 6
65 17 0 2 17 0 2 22 64 6 31 64 37 31 64 20 31 64 10 48 0 84 0
0 0 0 0 0 31 64 9 16 63 127 16 7 32 16 63 127 16 64 2 25 0 1 31
64 22 25 0 1 31 64 25 28 6 66 31 64 26 31 64 11 48 1 14 0 0 0
0 0 0 17 64 6 25 0 0 31 64 13 31 64 20 31 64 9 16 63 127 16 7
48 16 63 127 16 64 1 17 0 3 25 0 1 31 64 30 31 64 22 25 0 1 31
64 25 28 6 66 31 64 26 31 64 11 48 1 30 0 0 0 0 0 0 17 64 6 18
0 6 16 64 8 17 0 1 22 64 3 28 6 65 17 0 1 17 0 2 22 64 6 31 64
35 31 64 31 31 64 20 31 64 10 48 1 32 0 0 0 0 0 0 28 6 65 17 0
3 17 0 2 22 0 6 28 6 65 17 0 3 17 0 2 22 64 6 18 0 6 31 64 33
31 64 20 31 64 10 48 1 16 0 0 0 0 0 0 31 64 10 48 0 29 0 0 0 0
0 0 31 64 9 16 63 127 16 7 64 16 63 127 16 64 3 28 6 66 31 64
22 25 0 1 31 64 15 31 64 25 25 0 1 31 64 26 31 64 11 48 1 70 0
0 0 0 0 0 28 6 67 17 0 3 48 0 18 15 126 45 0 0 0 22 64 3 17 0
3 31 64 47 19 127 127 31 64 9 16 63 127 16 7 80 16 63 127 16 64
1 25 0 1 31 64 22 25 0 1 31 64 25 28 6 66 31 64 26 31 64 11 48
1 89 0 0 0 0 0 0 17 64 4 28 6 65 17 0 1 17 0 3 22 64 6 31 64 20
28 6 65 17 0 1 17 0 3 22 0 6 28 6 65 17 0 1 28 6 67 17 0 3 22
64 3 22 64 6 31 64 16 31 64 20 28 6 65 17 0 1 28 6 67 17 0 3 22
64 3 22 0 6 18 0 4 31 64 20 31 64 10 48 1 91 0 0 0 0 0 0 48 1
87 0 0 0 0 0 0 31 64 10 48 1 72 0 0 0 0 0 0 31 64 17 48 0 20 0
0 0 0 0 0 31 64 17 48 0 14 0 0 0 0 0 0 31 64 17 48 0 12 0 0 0
0 0 0 31 64 8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 76 48
99 27 114 44 0 0 0 0 0 0 16 0 0 16 0 1 16 0 3 97 81 27 76 48 118
27 82 33 0 0 0 0 0 0 80 0 10 96 3 90 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

