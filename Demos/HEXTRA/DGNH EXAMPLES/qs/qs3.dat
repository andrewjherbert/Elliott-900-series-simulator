   OPASC
   IPBIN
   ^8273
   8 86   (no call by name)
   ADLIB
   JUMP 12
   IPASC
qs3;
"begin"
   "comment" 26-APR-1998
             David M. Bressoud.
             Factorization and Primality Testing.
             Springer-Verlag 1989.

             Separately assembled stuff declared first;

   "code" "procedure" lead zero;  "algol";
   "code" "procedure" lead blank; "algol";
   "code" "procedure" unsigned;   "algol";
   "code" "procedure" revert;     "algol";
   "code" "integer" "procedure" max int; "algol";
   "code" "integer" "procedure" and(a,b);
          "value" a,b; "integer" a,b;
   "algol";
   "code" "procedure" add(a,b,c);
          "integer" "array" a,b,c; 
   "algol";
   "code" "procedure" sub(a,b,c);
          "integer" "array" a,b,c; 
   "algol";
   "code" "procedure" mpy(a,b); "value" b;
          "integer" "array" a;  "integer" b; 
   "algol";
   "code" "procedure" div(a,b); "value" b;
          "integer" "array" a;  "integer" b; 
   "algol";
   "code" "procedure" copy(a,b);
          "integer" "array" a,b; 
   "algol";
   "code" "procedure" if(a,b,L); 
          "integer" "array" a,b; "label" L;
   "algol";
   "code" "procedure" mod2(x,aa,b); 
          "integer" "array" x,aa,b;
   "algol";
   "code" "procedure" multiply(a,b,c,n); "value" n;
          "integer" "array" a,b,c; "integer" n;
   "algol";
   "code" "procedure" divide(x,y,a,b);
          "integer" "array" x,y,a,b;
   "algol";
   "code" "procedure" mod(x,a,b);
          "integer" "array" x,a,b;
   "algol";
   "code" "procedure" qdm;
   "algol";


   "comment" Outer block declarations;
   "integer" ks,L,m,n,s,u,x,y,z;

   "comment" Program start. Must pretend to call qdm in order
             to load some of the separately assembled stuff;
   "if" "false" "then" qdm;

   "print" ''L@26-APR-1998'L@@;
   "read" s,L,u,n,ks,m; 
   "comment" Initial assignments for the Wichman Hill
             random number generator;
   x:=123;
   y:=67;
   z:=85;
   "begin"
      "integer" i,j,k;
      "integer" "array" a,b,c,nb,one,sn,work,
                        w1,w2,zero[1:n],d[1:2*n];

      "comment" The procedures, get and put, could be provided
                with an extra parameter, n, and stowed alongside
                the declarations of the assembly-coded procedures.

                However, get uses add, and add needs its arrays
                to be located withing 8192 words of each other.
                Hence get actually needs to access a non-local
                array, work, and therefore needs to be located
                here. The same get and put have been used in all
                the programs for consistency;
 
      "procedure" get(a,s);
         "integer" "array" a; "string" s;
      "begin"
         "integer" j,k;
         "for" j := 1 "step" 1 "until" n "do" a[j] := work[j] := 0;

         "for" j := j "while" "not" buffer(1,s) "do"
         "begin"
            mpy(a,100000);
            "read" work[n];
            add(a,a,work)
         "end"
      "end" of get;

      "procedure" put(a,s);
         "integer" "array" a; "string" s;
      "begin"
         "integer" j,k,L,m,p,r,half;
         "boolean" zero;
         "integer" "array" work[1:2*n+1];

         "boolean" "procedure" fin;
         "begin"
            "integer" k;
            fin := "true";
            "for" k := 1 "step" 1 "until" n "do"
               "if" work[k] "ne" 0 "then" fin := "false"
         "end" of fin;

         "procedure" group;
         "begin"
            "integer" s;
            s := 10^r; mpy(work, s);
            "if" zero "then" "print" ' @;
            "print" digits(5), same line, work[n];
            work[n] := 0
         "end" of group;
 
         half := (max int "div" 2) + 1;
         "for" j := 1 "step" 1 "until" 2*n+1 "do" work[j] :=
            "if" j "le" n "then" a[j] "else" 0;
         work[n+1] := half;

         "for" j := -5, j+5 "while" "not" fin "do" div(work, 100000);
         mpy(work, 100000);
         "for" j := j, j+1 "while" "not" fin "do" div(work, 10);

         L := ((j-1) "div" 50) + 1;
         m := j - (L-1) * 50;
         p := ((m-1) "div" 5) + 1;
 
         "print" ''L@@;
         r := m - (p-1) * 5;
         zero := "false";
         group;
         lead zero;
         unsigned;
         zero := "true";
         r := 5;
         "for" k := 1 "step" 1 "until" p-1 "do" group;
         "for" j := 2 "step" 1 "until" L "do"
         "begin"
            "print" ''L@@;
            "for" k := 1 "step" 1 "until" 10 "do" group
         "end";
         lead blank;
         revert;
         "print" s
      "end" of put;

      "comment" x := m ^ e modulo nn;
      "procedure" power(x,m,e,nn);
                  "integer" "array" x,m,e,nn;
      "begin"
         "integer" half,j,k;
         "integer" "array" c,z[1:n];
         copy(x,zero);
         half := (max int "div" 2) + 1;
         x[1] := half;
         k := -1;
         "for" k := k+1 "while" nn[1] < half "do" mpy(nn,2);
p1:
         "for" j := 1 "step" 1 "until" n "do" z[j] := and(x[j],e[j]);
         if(z,zero,p2);
         "goto" p3;
p2:
         div(x,2);
         "goto" p1;
p3:
         copy(c,one);
p4:
         multiply(d,c,c,n);
         mod2(c,d,nn);
         "for" j := 1 "step" 1 "until" n "do"
            "if" and(z[j],e[j]) "ne" 0 "then" "goto" p6;
p5:
         if(z,one,p7);
         div(z,2);
         "goto" p4;
p6:
         multiply(d,c,m,n);
         mod2(c,d,nn);
         "goto" p5;
p7:
         "for" j := 1 "step" 1 "until" k "do" div(nn,2);
         copy(x,c);
         mod(x,x,nn)
      "end";

      "comment" prime is true if the number in the non-local
                array, b, is a prime;
      "boolean" "procedure" prime;
      "begin"
         "integer" L;
         "integer" "array" y[1:n+1];
         "integer" j,k;
         "integer" "array" q,z,bm1[1:n];
         prime := "false";
         "for" L :=  3,  5,  7, 11, 13, 17, 19, 23, 29, 31,
                    37, 41, 43, 47, 53, 59, 61, 67, 71, 73,
                    79, 83, 89, 97,101,103,107,109,113,127,
                   131,137,139,149,151,157,163,167,173,179,
                   181,191,193,197,199,211,223,227,229,233,
                   239,241,251 "do"
         "begin"
            add(y,b,zero);
            y[n+1] := 0;
            "if" and(y[n],1) = 0 "then" y[n] := y[n]-1;
            div(y,L);
            "if" y[n+1] = 0 "then" "goto" exit
         "end";
         j := 0;
         sub(bm1,b,one);
         sub(q,b,one);
         k := -1;
         "for" k := k+1 "while" and(q[n],1) = 0 "do" div(q,2);
         power(z,a,q,b);
pp3:
         "if" j = 0 "then" if(z,one,good);
         if(z,bm1,good);
         "if" j>0 "then" if(z,one,exit);
pp4:
         j := j + 1;
         "if" j<k "then"
         "begin"
            multiply(d,z,z,n);
            mod2(z,d,b);
            "goto" pp3
         "end";
         "goto" exit;
good:
         prime := "true";
exit:
      "end";

      "comment" x := a - b * c;
      "procedure" reduce(x,a,b,c); "value" b,c;
                  "integer" "array" x,a,b,c;
      "begin"
         "integer" j;
         "boolean" plus;
         "integer" "array" d[1:2*n];
         plus := "true";
         "if" b[1] < 0 "then"
         "begin"
            plus := "not" plus; sub(b,zero,b)
         "end";
         "if" c[1] < 0 "then"
         "begin"
            plus := "not" plus; sub(c,zero,c)
         "end";
         multiply(d,b,c,n);
         "for" j := 1 "step" 1 "until" n "do" x[j] := d[j];
         if(x,zero,r1);
        "print" ''L@capacity exceeded'L@@, stop;
r1:
         "for" j := 1 "step" 1 "until" n "do" x[j] := d[j+n];
         "if" "not" plus "then" sub(x,zero,x);
         sub(x,a,x)
      "end" of reduce;

      "comment" a := sqrt(a);
      "procedure" sqrt(a);
                  "integer" "array" a;
      "begin"
         "integer" j;
         "integer" "array" x,y,z[1:n],
                           aa[1:2*n];
         copy(y,one);
         mpy(y,10);
loop:
         copy(x,y);
         divide(z,y,a,x);
         add(y,x,y);
         add(y,y,one);
         div(y,2);
         "for" j := 1 "step" 1 "until" n-1 "do"
            "if" x[j] "ne" y[j] "then" "goto" loop;
         "if" abs(x[n] - y[n]) > 1 "then" "goto" loop;
         add(x,x,one);
         add(x,x,one);
cycle:
         sub(x,x,one);
         multiply(aa,x,x,n);
         "for" j := 1 "step" 1 "until" n "do" z[j] := aa[j+n];
         sub(y,a,z);
         "if" y[1] < 0 "then" "goto" cycle;
         copy(a,x)
      "end" of sqrt;

      "comment" a := b ^ (-1) modulo c;
      "procedure" inverse(a,b,c);
                  "integer" "array" a,b,c;
      "begin"
         "integer" "array" u1,u2,u3,v1,v2,v3,t1,t2,t3,p,q[1:n];
         copy(u1,one);
         copy(u2,zero);
         copy(u3,c);
         copy(v1,zero);
         copy(v2,one);
         copy(v3,b);
zloop:
         if(v3,one,finish);
         divide(p,q,u3,v3);
         reduce(t1,u1,v1,q);
         reduce(t2,u2,v2,q);
         reduce(t3,u3,v3,q);
         copy(u1,v1);
         copy(u2,v2);
         copy(u3,v3);
         copy(v1,t1);
         copy(v2,t2);
         copy(v3,t3);
         "goto" zloop;
finish:
         "if" v2[1] < 0 "then" add(v2,v2,c);
         copy(a,v2)
      "end" of inverse;

      "comment" The Wichmann-Hill portable random number
                generator. B. A. Wichmann and I. D. Hill,
                An Efficient and Portable Pseudo-Random Number
                Generator, Applied Statistics, 31 (No. 2),
                188-190 (1982) ;
      "real" "procedure" Wichmann;
      "begin"
         "real" w;
         x := 171 * (x - (x "div" 177) * 177) -  2 * (x "div" 177);
         y := 172 * (y - (y "div" 176) * 176) - 35 * (y "div" 176);
         z := 170 * (z - (z "div" 178) * 178) - 63 * (z "div" 178);
         "if" x < 0 "then" x := x + 30269;
         "if" y < 0 "then" y := y + 30307;
         "if" z < 0 "then" z := z + 30323;
         w := x/30269.0 + y/30307.0 + z/30323.0;
         Wichmann := w - entier(w) 
      "end" of Wichmann;

      "comment" Program start;
      "for" j := 1 "step" 1 "until" n "do" one[j] := zero[j] := 0;
      one[n] := 1;
      get(nb,'P@);
      mpy(nb,ks);
      copy(sn,nb);
      mpy(sn,2);
      sqrt(sn);
      div(sn, s "div" 2);
      "for" k := L "step" 1 "until" u "do"
      "begin"
         copy(b,sn);
         copy(w1,zero);
         w1[n] := abs(k);
         "if" k < 0 "then" sub(b,b,w1) "else" add(b,b,w1);
         "comment" Choose numbers equal to 3 modulo 4;
         "if" and(b[n],3) "ne" 3 "then" "goto" next;
         copy(w1,b);
         "comment" This step takes a long time. Ideally one
                   should run from 1 up to 5, but time is
                   saved by only doing it twice;
         "for" i := 1 "step" 1 "until" 2 "do"
         "begin"
            "for" j := 1 "step" 1 "until" n "do" 
               a[j] := b[j] * Wichmann;
            "if" "not" prime "then" "goto" next 
         "end";
         copy(a,b);
         copy(w1,b);
         add(w1,w1,one);
         div(w1,4);
         power(c,nb,w1,b);
         copy(b,c);
         multiply(d,b,b,n);
         "for" j := 1 "step" 1 "until" n "do" c[j] := d[j];
         if(c,zero,goo);
         "print" ''L@overflow@;
         stop;
goo:  
         "for" j := 1 "step" 1 "until" n "do" c[j] := d[j+n];
         sub(c,nb,c);
         divide(w1,w2,c,a);
         if(w1,zero,fine);
         "goto" next;
fine: 
         inverse(c,a,nb);
         "comment" Output a polynomial;
         put(a,'A@);
         put(b,'B@);
         put(c,'C@);
next: 
      "end"
   "end";
   "print" ''L@     0A'L@@
"end"

   1000   -30    30
      3     1    29
    499 94860 12441P

