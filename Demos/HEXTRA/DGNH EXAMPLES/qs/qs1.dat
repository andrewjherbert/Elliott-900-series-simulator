   OPASC
   IPBIN
   ^8273
   8 86   (no call by name)
   ADLIB
   JUMP 12
   IPASC
qs1;
"begin"
   "comment" 27-APR-1998
             David M. Bressoud.
             Factorization and Primality Testing.
             Springer-Verlag 1989.

             Separately assembled stuff declared first;

   "code" "procedure" lead zero;  "algol";
   "code" "procedure" lead blank; "algol";
   "code" "procedure" unsigned;   "algol";
   "code" "procedure" revert;     "algol";
   "code" "integer" "procedure" max int; "algol";
   "code" "procedure" add(a,b,c);
          "integer" "array" a,b,c; 
   "algol";
   "code" "procedure" sub(a,b,c);
          "integer" "array" a,b,c; 
   "algol";
   "code" "procedure" mpy(a,b); "value" b;
          "integer" "array" a;  "integer" b; 
   "algol";
   "code" "procedure" div(a,b); "value" b;
          "integer" "array" a;  "integer" b; 
   "algol";
   "code" "procedure" copy(a,b);
          "integer" "array" a,b; 
   "algol";
   "code" "procedure" if(a,b,L); 
          "integer" "array" a,b; "label" L;
   "algol";
   "code" "procedure" mod2(x,aa,b); 
          "integer" "array" x,aa,b;
   "algol";
   "code" "procedure" multiply(a,b,c,n); "value" n;
          "integer" "array" a,b,c; "integer" n;
   "algol";
   "code" "procedure" divide(x,y,a,b);
          "integer" "array" x,y,a,b;
   "algol";
   "code" "procedure" mod(x,a,b);
          "integer" "array" x,a,b;
   "algol";
   "code" "procedure" qdm;
   "algol";

   "integer" n,ks,m;
   "comment" Program start. Must pretend to call qdm in order
             to load some of the separately assembled stuff;
   "if" "false" "then" qdm; 
   "print" ''L@27-APR-1998'L@@;
   "read" n,ks,m;
   "begin"
      "integer" j,t;
      "integer" "array" nb,one,w,work,zero[1:n],
                        ps[1:m],
                        a,b[1:2];

      "comment" The procedures, get and put, could be provided
                with an extra parameter, n, and stowed alongside
                the declarations of the assembly-coded procedures.

                However, get uses add, and add needs its arrays
                to be located withing 8192 words of each other.
                Hence get actually needs to access a non-local
                array, work, and therefore needs to be located
                here. The same get and put have been used in all
                the programs for consistency;
 
      "procedure" get(a,s);
         "integer" "array" a; "string" s;
      "begin"
         "integer" j,k;
         "for" j := 1 "step" 1 "until" n "do" a[j] := work[j] := 0;

         "for" j := j "while" "not" buffer(1,s) "do"
         "begin"
            mpy(a,100000);
            "read" work[n];
            add(a,a,work)
         "end"
      "end" of get;

      "procedure" put(a,s);
         "integer" "array" a; "string" s;
      "begin"
         "integer" j,k,L,m,p,r,half;
         "boolean" zero;
         "integer" "array" work[1:2*n+1];

         "boolean" "procedure" fin;
         "begin"
            "integer" k;
            fin := "true";
            "for" k := 1 "step" 1 "until" n "do"
               "if" work[k] "ne" 0 "then" fin := "false"
         "end" of fin;

         "procedure" group;
         "begin"
            "integer" s;
            s := 10^r; mpy(work, s);
            "if" zero "then" "print" ' @;
            "print" digits(5), same line, work[n];
            work[n] := 0
         "end" of group;
 
         half := (max int "div" 2) + 1;
         "for" j := 1 "step" 1 "until" 2*n+1 "do" work[j] :=
            "if" j "le" n "then" a[j] "else" 0;
         work[n+1] := half;

         "for" j := -5, j+5 "while" "not" fin "do" div(work, 100000);
         mpy(work, 100000);
         "for" j := j, j+1 "while" "not" fin "do" div(work, 10);

         L := ((j-1) "div" 50) + 1;
         m := j - (L-1) * 50;
         p := ((m-1) "div" 5) + 1;
 
         "print" ''L@@;
         r := m - (p-1) * 5;
         zero := "false";
         group;
         lead zero;
         unsigned;
         zero := "true";
         r := 5;
         "for" k := 1 "step" 1 "until" p-1 "do" group;
         "for" j := 2 "step" 1 "until" L "do"
         "begin"
            "print" ''L@@;
            "for" k := 1 "step" 1 "until" 10 "do" group
         "end";
         lead blank;
         revert;
         "print" s
      "end" of put;

      "comment" a := sqrt(a);
      "procedure" sqrt(a);
                  "integer" "array" a;
      "begin"
         "integer" j;
         "integer" "array" x,y,z[1:n],aa[1:2*n];
         copy(y,one);
         mpy(y,10);
loop:
         copy(x,y);
         divide(z,y,a,x);
         add(y,x,y);
         add(y,y,one);
         div(y,2);
         "for" j := 1 "step" 1 "until" n-1 "do"
            "if" x[j] "ne" y[j] "then" "goto" loop;
         "if" abs(x[n] - y[n]) > 1 "then" "goto" loop;
         add(x,x,one);
         add(x,x,one);
cycle:
         sub(x,x,one);
         multiply(aa,x,x,n);
         "for" j := 1 "step" 1 "until" n "do" z[j] := aa[j+n];
         sub(y,a,z);
         "if" y[1] < 0 "then" "goto" cycle;
         copy(a,x)
      "end" of sqrt;

      "comment" Program continues. Get initial data;
      "for" j := 1 "step" 1 "until" n "do" one[j] := zero[j] := 0;
      one[n] := 1;
      get(nb,'P@);
      mpy(nb,ks);
      copy(w,nb);
      sqrt(w);
      put(w,'Q@);
      "print" ''L@@;
      "for" j := 1 "step" 1 "until" m "do" "read" ps[j];
      "comment" This does not follow the method given in 
                Bressoud's book. It uses a direct method
                instead which is probably slower;
      "for" j := 1 "step" 1 "until" m "do"
      "begin"
         copy(w,nb);
         div(w,ps[j]);
         mpy(w,ps[j]);
         sub(w,nb,w);
         "for" t := 1 "step" 1 "until" ps[j] "do"
         "begin"
            a[1] := 0;
            a[2] := t;
            mpy(a,t);
            copy(b,a);
            div(b,ps[j]);
            mpy(b,ps[j]);
            sub(b,a,b);
            "if" b[2] = w[n] "then" "goto" found
         "end";
         "print" ''L@gloom@, b[2], same line, w[n], ''L@@;
         stop;
found:
         "if" ((j-1) "div" 10) * 10 = j-1 "then" "print" ''L@@;
         "print" same line, digits(4), t
      "end"
   "end";
   "print" ''L@@
"end"

    3     1    29
  499 94860 12441P
    2    3    5    7   17   19   31   43   47   59
   61   67  107  163  181  193  197  229  241  263
  271  277  311  331  349  359  367  389  397


 
