
on 
telecode 903
at ptr file ..\HUNTER\ALG16KLG(HUNTER).BIN
j 8181
st 5124

C    (An assembly code patch to permit the equivalent of
C     the Pegasus Caption facility)


enter 3726 =2 8180
enter 3727 =7 3689
enter 3728 =8 8181
enter 8180 =0 33
enter 8181 =2 8180
enter 8182 =15 6144
enter 8183 =8 3724

select out tty
at ptr inline

cannib;
"begin"
   "comment" 09-NOV-2000;
   "comment" wml, wcl, wmr, wcr are the working values of the
             proposed number of missionaries and cannibals at
             the left and at the right;
   "integer" j, start, steps, wml, wcl, wmr, wcr;
   "comment" cases is a record of the "case" statements used
             at each step, so as to revert properly to an earlier
             step when no way forward can be found from the current
             situation. ml is missionaries left, cl is cannibals
             left etc;
   "integer" "array" cases, ml, cl, mr, cr[1:20];
   "comment" direction keeps a record of where the boat was, for
             the use of the "old" procedure;
   "boolean" "array" direction[1:20]; 
   "comment" right is true when the boat is supposed to go to
             the right;
   "boolean" right;

   "procedure" init;
   "begin"
      ml[1] := 3;
      cl[1] := 3;
      mr[1] := 0;
      cr[1] := 0;
      right := direction[1] := "true"; "comment" ie start to the
                                       right;
      steps := 1;
      "read" start; "comment" this chooses the boat crew;
      cases[1] := start
   "end" of init;

   "boolean" "procedure" old;
   "begin"
      "integer" j;
      old := "false";
      "for" j := 1 "step" 1 "until" steps "do"
         "if" wml = ml[j] "and"
              wcl = cl[j] "and"
              wmr = mr[j] "and"
              wcr = cr[j] "and"
              right "ne" direction[j] "then" old := "true"
   "end" of old;

   "boolean" "procedure" eat;
      eat :=
           (wml > 0 "and" wml < wcl) "or"
           (wmr > 0 "and" wmr < wcr);

   "boolean" "procedure" too many;
   toomany := wml <0 "or"
              wcl <0 "or"
              wmr <0 "or"
              wcr <0;

   "boolean" "procedure" finish;
      finish :=
           wml = 0 "and"
           wcl = 0 "and"
           wmr = 3 "and"
           wcr = 3;

   "procedure" transit;
   "begin"
      "integer" case, k, m, c, temp;
      "boolean" done;
again:
      done := "false"; k := 0;
      "for" case := start, case + 1 "while" (case < start + 5)
         "and" "not" done "do"
      "begin"
         "switch" s := l1, l2, l3, l4, l5;
         temp := case; k := k + 1;
         "if" temp > 5 "then" temp := temp - 5;
         "goto" s[temp];
l1:      
         m := 2; c := 0; "goto" l6;
l2:      
         m := 1; c := 0; "goto" l6;
l3:      
         m := 1; c := 1; "goto" l6;
l4:      
         m := 0; c := 1; "goto" l6;
l5:      
         m := 0; c := 2; "goto" l6;
l6:      
         "if" right "then"
         "begin"
            wml := ml[steps] - m;
            wcl := cl[steps] - c;
            wmr := mr[steps] + m;
            wcr := cr[steps] + c
         "end"      "else"
         "begin"
            wml := ml[steps] + m;
            wcl := cl[steps] + c;
            wmr := mr[steps] - m;
            wcr := cr[steps] - c
         "end";
         done := ("not" eat) "and" 
                 ("not" old) "and" 
                 ("not" too many);
         "if" done "then" 
         "begin"
            cases[steps] := temp;
            direction[steps] := right
         "end";
         "if" k = 5 "and" "not" done "then" 
         "begin"
            "print" 'revert`;
            "for" j := 1 "step" 1 "until" steps "do"
               "print" ml[j], same line, cl[j], mr[j], cr[j];
            steps := steps - 1;
            right := direction[steps];
            start := cases[steps] + 1;
            "goto" again
         "end"
      "end"
   "end" of transit;

   "comment" program start;

   "print" ''L`09-NOV-2000`;

   init;
   "for" j := j "while" "not" finish "do"
   "begin"
      transit;
      steps := steps + 1;
      ml[steps] := wml;
      cl[steps] := wcl;
      mr[steps] := wmr;
      cr[steps] := wcr;
      right := "not" right
   "end";
   "print" ''L2`the answer`;
   "for" j := 1 "step" 1 "until" steps "do"
      "print" ml[j], same line, cl[j], mr[j], cr[j]
"end" of program
!
A simplified Missionaries and Cannibals program
!
1
<!!>
j 8
st 7943
j 10
st 1727
sh t
