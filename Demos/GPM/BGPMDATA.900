
BGPM DEMOS


Examples from Strachey's Computer Journal Paper
-----------------------------------------------

General Purpose Macrogenerator
by C. Strachey
CJ Vol.8 No.3, Oct 1965

Examples of macro expansion.

{[def\A\{A^1A}]}[def\A\{A^1A}]
{[def\B\{B[A\X^1X]B}]}[def\B\{B[A\X^1X]B}]
{[def\APA\{P^1^1P}]}[def\APA\{P^1^1P}]

{[A\C]}       = [A\C]
{[A\ACA]}     = [A\ACA]
{[A\[A\C]]}   = [A\[A\C]]
{[A\XDX]}     = [A\XDX]
{[B\D]}       = [B\D]
{[A\P]}       = [A\P]
{[APA\Y]}     = [APA\Y]
{[[A\P]\Y]}   = [[A\P]\Y]

{Q{[A\C]}R}   = Q{[A\C]}R
{[A\{[A\X]}]} = [A\{[A\X]}]
{[B\{[A\X]}]} = [B\{[A\X]}]
{Q{[}R{]}}    = Q{[}R{]}
{Q{{[A\C]}}R} = Q{{[A\C]}}R

{[A\X\U\[def\A\{^1^2^1}]]} = [A\X\U\[def\A\{^1^2^1}]]

Functional product example.

{[def\Log\{log(^1)}] [def\Sin\{sin(^1)}]}`
	[def\Log\{log(^1)}] [def\Sin\{sin(^1)}]
{[def\FNPROD\{[def\^1^2\{[}^1{\[}^2{\^1]]}]}]}`
	[def\FNPROD\{[def\^1^2\{[}^1{\[}^2{\^1]]}]}]
{[FNPROD\Log\Sin]}`
	[FNPROD\Log\Sin]
{[LogSin\x]} = [LogSin\x]

Modified version of Sum, correcting error in original.

This version corrects the bug in Successor as defined
in Strachey's paper.

[def\Suc\{[1\2\3\4\5\6\7\8\9\10\[def\1\{^}^1]]}]`

`{[Suc\0]} => [Suc\0]
`{[Suc\1]} => [Suc\1]
`{[Suc\2]} => [Suc\2]
`{[Suc\9]} => [Suc\9]

[def\Successor\{[^2\[def\^2\^1{{\}[Suc\}^2{]}]`
                    [def\9\{[Suc\}^1{]{\}0}]]}]`


{[Successor\3\4]} => [Successor\3\4]
{[Successor\3\9]} => [Successor\3\9]

[def\Sum\{[S\^1\^2\0\`
            [def\S\`
              {[^3\`
                 [def\^3\{[S\}[Successor\^1\^2]{\}[Suc\^3]{]}]`
                 [def\}^3{\^1{\}^2]`
               ]`
              }`
            ]`
          ]`
         }`
]`

{[Sum\3\4\2]} => [Sum\3\4\2]
{[Sum\3\8\3]} => [Sum\3\8\3]

End of examples from CJ paper.
<! halt !>





This version contains the bug in Successor as defined
in Strachey's paper.

[def\Suc\{[1\2\3\4\5\6\7\8\9\10\[def\1\{^}^1]]}]`

`{[Suc\0]} => [Suc\0]
`{[Suc\1]} => [Suc\1]
`{[Suc\2]} => [Suc\2]
`{[Suc\9]} => [Suc\9]

[def\Successor\{[^2\[def\^2\^1{\[Suc\}^2{]}]`
                    [def\9\{[Suc\}^1{]\0}]]}]`



`{[Successor\3\4]} => [Successor\3\4]
`{[Successor\3\9]} => [Successor\3\9]

[def\Sum\{[S\^1\^2\0\`
            [def\S\`
              {[^3\`
                 [def\^3\{[S\}[Successor\^1\^2]{\}[Suc\^3]{]}]`
                 [def\}^3{\^1{\}^2]`
               ]`
              }`
            ]`
          ]`
         }`
]`

{[Sum\3\4\2]} => [Sum\3\4\2]
`{[Sum\3\8\3]} => [Sum\3\8\3]

End of version of Sum with bug.

<! halt !>





Martin Richards Examples
------------------------

Towers of Hanoi.

[def\H\{[^1\^2\^3\^4\
           [def\^1\{`
                    [H\[eval\^0-1]\^1\^3\^2]`
                    Move disc ^0 from tower ^1 to tower ^2
`
                    [H\[eval\^0-1]\^3\^2\^1]`
                   }`
           ]`
           [def\0\]`
        ]`
       }`
]`

{[H\1\A\B\C]} =>
[H\1\A\B\C]

{[H\2\A\B\C]} =>
[H\2\A\B\C]

{[H\3\A\B\C]} =>
[H\3\A\B\C]

{[H\4\A\B\C]} =>
[H\4\A\B\C]

End of Hanoi.

<! halt !>





Permutations.


[def\inc\{[eval\^1+1]}]`
[def\dec\{[eval\^1-1]}]`

[def\perm\{`
   [perms\1\^1\\^2\`
     [def\arg\{[list\`
                 [def\S\{^}^1]`
               ]`
              }`
     ]`
     [def\ax\{[^1\^1\`
                 [def\^1\{{\}[arg\^1]}]`
                 [def\^2\]`
              ]`
             }`
     ]`
     [def\allbut\{[ax\^1\^2]`
                  [^1\^1\^2\^3\`
                    [def\^1\{[allbut\[inc\^1]\^2\^3]}]`
                    [def\^3\]`
                  ]`
                 }`
     ]`
     [def\perms\{`
       [^2\^1\^2\^3\^4\`
         [def\list\{[}S^4{]}]`
         [def\^2\{[perms\1\[dec\^2]\^3[arg\^1]\[allbut\1\^1\^2]]`
                  [^1\^1\^2\^3\^4\`
                    [def\^1\{[perms\[inc\^1]\^2\^3\^4]}]`
                    [def\^2\][debug]`
                  ]`
                 }`
         ]`
         [def\0\^3
`
         ]`
       ]`
      }`
     ]`
   ]`
 }`
]` End of def perm

[def\debug\]`

Permuting A B C

{[perm\3\{\A\B\C}]} =>
[perm\3\{\A\B\C}]


{[perm\5\{\A\B\C\D\E}]} =>
[perm\5\{\A\B\C\D\E}]


End of permutation.

<! halt !>





Primes.


{[prime\n]} => the nth prime number.

[def\+\{[eval\^1+^2]}]`      
[def\%\{[eval\^1%^2]}]`

[def\isprime\{`
   [p%^1=[%\^2\^1]\`
     [def\p%^1=[%\^2\^1]\{[isprime\[+\}^1{\1]\}^2{]}]`
     [def\p%^1=0\no]`
     [def\p%^2=0\yes]`
   ]`
 }`
]`

[def\nextprime\{`
`nextprime entered
   [set\p\[+\[p]\1]]`
`p now = [p]
`{[isprime\2\[p]]} => [isprime\2\[p]]
`Calling macro test=[isprime\2\[p]] after defining test=yes and test=no
   [test=[isprime\2\[p]]\`
     [def\test=yes\]`
     [def\test=no\{[nextprime]}]`
   ]`
 }`
]`

[def\iter\{`
   [res[n]\`
      [def\res[n]\{`
        [set\i\[+\[i]\1]]`
        [nextprime]`
        [iter]`
      }`
     ]`
     [def\res[i]\{[p]}]`
   ]`
 }`
]`

[def\prime\{`
   [iter\`
     [def\n\[+\^1\0]]`
     [def\i\1\padding]`
     [def\p\2\padding]`
   ]`
 }`
]`


{[isprime\2\2]}   = [isprime\2\2]
{[isprime\2\3]}   = [isprime\2\3]
{[isprime\2\4]}   = [isprime\2\4]
{[isprime\2\5]}   = [isprime\2\5]
{[isprime\2\6]}   = [isprime\2\6]
{[isprime\2\9]}   = [isprime\2\9]
{[isprime\2\136]} = [isprime\2\136]

{[prime\1]}   => [prime\1]
{[prime\2]}   => [prime\2]
{[prime\3]}   => [prime\3]
{[prime\10]}  => [prime\10]
{[prime\20]}  => [prime\20]
{[prime\29]}  => [prime\29\Biggest prime we can do in 16K]

End of primes.

<! halt !>





{[collatz\n]} will output the Collatz sequence starting at n.

n => n/2,  if n even
n => 3n+1, if n odd

continue until n=1

Collatz conjecture: every Collatz sequence ends with a one.

I.e. can it ever diverge, or end in a loop not containing 1?


[def\collatz\{[C\`
  [def\n\0000000000]`
  [set\n\[eval\^1]]`
  [def\R0\{[set\n\[eval\[n]/2]]}]`
  [def\R1\{[set\n\[eval\3*[n]+1]]}]`
  [def\next\{[R[eval\[n]%2]]}]`
  [def\C\{`
    [n]
`
    [[n]\[def\[n]\{[next][C]}]`
         [def\1\]]`
}]`
]}`
]`

{[collatz\7]} =>
[collatz\7]

{[collatz\767]} =>
[collatz\767]

`{[collatz\600000001]} =>
`[collatz\600000001]


End of Collatz.

END OF BGPM TESTS.

<! halt !>