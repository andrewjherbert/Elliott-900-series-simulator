<! Legible Header OOOOO  OOO  OOOO   OOO   OOO   OOO              OOOOO  OOO  OOOO  OOOOO    O     O  OOOOO  OOO   OOO  O   O OOOOO  OOO    O    !>
<! Legible Header O     O   O O   O O   O O   O O   O             OOOOO O   O O   O O      OOO    O     O   O   O O   O O   O O     O   O    O   !>
<! Legible Header O     OO    O   O O   O O   O O   O               O   O   O O   O O      OOO   O      O   OO    OO    O   O O         O     O  !>
<! Legible Header OOOO   OO   OOOO   OOOO O   O O   O               O   OOOOO OOOO  OOOO     O   O      O    OO    OO   O   O OOOO    OOO     O  !>
<! Legible Header O           O         O O   O O   O               O   O   O O     O        O          O               O   O O                  !>
<! Legible Header O        O  O         O O   O O   O               O         O     O        O   O      O      O     O  O   O O     OO        O  !>
<! Legible Header O     O   O O     OOOOO O   O O   O               O   O   O O     O        O    O     O   O   O O   O OOOOO O     O        O   !>
<! Legible Header OOOOO OOOO  O     OOOO   OOO   OOO                O   O   O O     OOOOO    O     O  OOOOO OOOO  OOOO  OOOOO OOOOO OOOOO   O    !>

ESP900 PROVISIONAL;
"BEGIN" "INTEGER" MAX;
"CODE"
"INTEGER" "PROCEDURE" STOREMAX;
"ALGOL";
"PRINT" PUNCH(3),‘ARRAY STORAGE AVAILABLE@,SAMELINE,STOREMAX-28,‘
INPUT LISTSIZE@;
"READ" READER(3),MAX;
"IF" MAX=0 "THEN" MAX:=500;
"BEGIN" "INTEGER" LAST,FREE,TIME;
"REAL" MULT1,MULT2,RAND;
  "BOOLEAN" FROMPRIMARY; "INTEGER" "ARRAY" LIST[1:MAX],GET,SEND[0:10];



"PROCEDURE" EXTRACT(FIRST,FIRST1); "INTEGER" FIRST,FIRST1;
"BEGIN" "INTEGER" I,J,TEMP,TEMP1,TEMP2,TEMP3,TEMP4,TEMP5;
"SWITCH" SS:=L1;
 "IF" LAST=0 "THEN" "PRINT"PUNCH(3), ‘
ERR2@,STOP;
 FIRST:=LIST[MAX]; FIRST1:=LIST[MAX-1];
 TEMP4:=LIST[MAX-LAST+2];
 TEMP5:=LIST[MAX-LAST+1];
 LAST:=LAST-2; I:=2;
L1: J:=I+I;
 "IF" J"LE" LAST"THEN"
 "BEGIN" TEMP:=LIST[MAX-J+2];
  TEMP1:=LIST[MAX-J];
  TEMP2:=LIST[MAX-J+1];
  TEMP3:=LIST[MAX-J-1];
  "IF" TEMP1< TEMP"THEN"
  "BEGIN" TEMP:=TEMP1;
   TEMP2:=TEMP3;
   J:=J+2
  "END";
  "IF" TEMP<TEMP4 "THEN"
  "BEGIN" LIST[MAX-I+2]:=TEMP;
   LIST[MAX-I+1]:=TEMP2;
   I:=J;
   "GOTO" L1
  "END"
 "END";
 LIST[MAX-I+2]:=TEMP4;
 LIST[MAX-I+1]:=TEMP5;
"END" EXTRACT;



"PROCEDURE" INSERT(NEW,NEW1); "VALUE" NEW,NEW1;
     "INTEGER" NEW,NEW1;
"BEGIN" "INTEGER" TEMP,TEMP1,I,J;
"SWITCH" SS:=L1;
 "IF" FREE"GE"MAX-LAST"THEN"
 "PRINT"PUNCH(3), ‘
ERR1@,STOP;
 I:=LAST:=LAST+2;
L1: "IF" I=2 "THEN"
 "BEGIN" LIST[MAX]:=NEW;
  LIST[MAX-1]:=NEW1
 "END"
 "ELSE" "BEGIN" J:=2*(I"DIV" 4);
   TEMP:=LIST[MAX-J+2];
   TEMP1:=LIST[MAX-J+1];
   "IF" NEW<TEMP"THEN"
   "BEGIN" LIST[MAX-I+2]:=TEMP;
    LIST[MAX-I+1]:=TEMP1;
    I:=J;
  "GOTO" L1
  "END"
  "ELSE" "BEGIN" LIST[MAX-I+2]:=NEW;
  LIST[MAX-I+1]:=NEW1
  "END"
 "END"
"END" INSERT;



"PROCEDURE" DOPOINT(I); "VALUE" I; "INTEGER" I;
"BEGIN" "INTEGER" POINTER;
 POINTER:=LIST[I];
 LIST[POINTER]:=LIST[POINTER]+I;
 LIST[I]:=0
"END" DOPOINT;



"PROCEDURE" CLOSEBLOCKS;
"BEGIN" "INTEGER"OLD,NEW,LENGTH,I;
"SWITCH" SS:=REPEAT;
 "FOR" I:=MAX-LAST+1 "STEP" 2 "UNTIL" MAX-1 "DO"
 "IF" LIST[I]>0 "THEN" DOPOINT(I);
 OLD:=NEW:=1;
REPEAT:LENGTH:=LIST[OLD+1];
 "IF" LIST[OLD]"GE"0 "THEN"
 "BEGIN" "IF" OLD"NE" NEW"THEN"
  "FOR" I:=0 "STEP" 1 "UNTIL" LENGTH+2 "DO"
  LIST[NEW+I]:=LIST[OLD+I];
  DOPOINT(NEW);
  NEW:=NEW+LENGTH+3
 "END";
 OLD:=OLD+LENGTH+3;
 "IF" OLD"NE" FREE"THEN" "GOTO" REPEAT;
 "IF" NEW=FREE"THEN"
 "PRINT"PUNCH(3),‘
ERR1@,STOP
 "ELSE" FREE:=NEW
"END" CLOSEBLOCKS;



<! Halt !>


"PROCEDURE"CALL(HAP,T); "VALUE"HAP,T; "INTEGER"HAP,T;
"BEGIN" "INTEGER" I,T1,LENGTH,KEYWORD;
LENGTH:=SEND[0];
 "IF"HAP"LE"0 "OR"T<0 "OR" T>131071-TIME
 "OR" LENGTH<0 "OR" LENGTH>10 "THEN"
 "PRINT"PUNCH(3),‘
ERR3@,STOP;
T1:=TIME+T;
 "IF" MAX-LENGTH-FREE-LAST-4<0 "THEN"
 CLOSEBLOCKS;
 "IF" LENGTH=0 "THEN" KEYWORD:=-HAP
 "ELSE" "BEGIN" KEYWORD:=FREE;
   LIST[FREE]:=0;
   LIST[FREE+1]:=LENGTH;
   LIST[FREE+2]:=HAP;
   "FOR" I:=1 "STEP" 1 "UNTIL" LENGTH"DO"
   LIST[FREE+2+I]:=SEND[I];
   FREE:=FREE+LENGTH+3
"END";
INSERT(T1,KEYWORD);
SEND[0]:=0
"END"CALL;



<! Halt !>

"INTEGER" "PROCEDURE"NEXT;
 "BEGIN" "INTEGER" KEY,CHECKNEXT,POINTER,COUNT;
"SWITCH" SS:=FINISH;
   KEY:=LIST[MAX];
  "IF" FROMPRIMARY "THEN"
  "BEGIN" "COMMENT" TIMEFORACTION;
   FROMPRIMARY:="FALSE";
TIME:=KEY
  "END" "ELSE" "IF"TIME<KEY "THEN"
  "BEGIN"NEXT:=CHECKNEXT:=1; FROMPRIMARY:="TRUE";
   "GOTO" FINISH
  "END";
  EXTRACT(KEY,POINTER);
  "IF" POINTER<0 "THEN"
  "BEGIN"CHECKNEXT:=NEXT:=1-POINTER;
  GET[0]:=0
  "END" "ELSE"
  "BEGIN"GET[0]:=LIST[POINTER+1];
  NEXT:=CHECKNEXT:=LIST[POINTER+2]+1;
  "FOR" COUNT:=1 "STEP" 1 "UNTIL"GET[0] "DO"
  GET[COUNT]:=LIST[POINTER+COUNT+2];
  LIST[POINTER]:=-1
  "END";
FINISH:SEND[0]:=0;CHECKS(‘TIME@);KEY:=CHECKI(TIME);CHECKS(‘NEXT@);
                  KEY:=CHECKI(CHECKNEXT-1);
 "END"NEXT;



"CODE"
"PROCEDURE" INITIALISE(A,B,C);
"REAL" A,B,C;
"ALGOL";



"PROCEDURE"PREPARE;
 "BEGIN" "COMMENT" RAND:=28747135 MULT1:=1071581425 MULT2:=455470314;
INITIALISE(RAND,MULT1,MULT2);
  LAST:=TIME:=SEND[0]:=0;
  FREE:=1;
  FROMPRIMARY:="FALSE"
 "END"PREPARE;



"COMMENT" THROUGHOUT THE RANDOM NUMBER ROUTINES,VARIABLES DECLARED TO
BE OF TYPE REAL ARE IN FACT DOUBLE LENGTH INTEGERS;

<! Halt !>


"CODE"
"INTEGER" "PROCEDURE" XBASERANDOM(INITIAL,MULT);
"VALUE" MULT; "REAL" INITIAL,MULT;
"ALGOL";


"INTEGER" "PROCEDURE" BASERANDOM(X);
"REAL" X;
"BEGIN" BASERANDOM:=XBASERANDOM(X,MULT2)
"END" BASERANDOM;

"REAL" "PROCEDURE" SETRANDOM;
"BEGIN" "INTEGER" DUMMY;
DUMMY:= XBASERANDOM(RAND,MULT1);
SETRANDOM:=RAND
"END" SETRANDOM;



"COMMENT" END OF RANDOM NUMBER ROUTINES;



"COMMENT" RANDOM SAMPLING PROCEDURES;




"INTEGER" "PROCEDURE" RANDOM(A,B,X);
"VALUE" A,B; "INTEGER" A,B; "REAL" X;
"BEGIN" RANDOM:=ENTIER(XBASERANDOM(X,MULT2)/131071.0*(B-A+1))+A;
"END" RANDOM;
<! Halt !>


"INTEGER" "PROCEDURE" GEOMETRIC(P,U);
"VALUE" P; "REAL" P,U;
"BEGIN" "INTEGER" B; "REAL" A,C,E,Q;
"SWITCH" SS:=LOOP;
E:=XBASERANDOM(U,MULT2)/131071.0;
A:=C:=P;
Q:=1.0-P;
B:=1;
LOOP: "IF" C<E "THEN"
"BEGIN" B:=B+1;
A:=A*Q;
C:=C+A;
"GOTO" LOOP
"END";
GEOMETRIC:=B
"END" GEOMETRIC;




"REAL" "PROCEDURE" LOGNORMAL(MEAN,SIGMA,U);
"VALUE" MEAN,SIGMA; "REAL" MEAN,SIGMA,U;
"BEGIN" "INTEGER" J; "REAL" SUM;
SUM:=0;
"FOR" J:=1 "STEP" 1 "UNTIL" 12 "DO"
SUM:=SUM+XBASERANDOM(U,MULT2);
LOGNORMAL:=EXP(MEAN+SIGMA*(SUM/131071.0-6.0))
"END" LOGNORMAL;



"REAL" "PROCEDURE"NEGEXP(MEAN,U);
"VALUE" MEAN; "REAL" MEAN,U;
"BEGIN" "REAL" TEMPO; "SWITCH" SS:=ZERO;
ZERO: TEMPO:=XBASERANDOM(U,MULT2)/131071.0;
"IF" TEMPO=0 "THEN" "GOTO" ZERO;
NEGEXP:=-MEAN*LN(TEMPO);
"END"NEGEXP;





"REAL" "PROCEDURE" NORMAL(MEAN,SIGMA,U);
"VALUE" MEAN,SIGMA;
"REAL" MEAN,SIGMA,U;
"BEGIN" "INTEGER" J; "REAL" SUM;
SUM:=0;
"FOR" J:=1 "STEP" 1 "UNTIL" 12 "DO"
SUM:=SUM+XBASERANDOM(U,MULT2);
NORMAL:=MEAN+SIGMA*(SUM/131071.0-6.0);
"END" NORMAL;


<! Halt !>


"REAL" "PROCEDURE" FASTNORMAL(MEAN,SIGMA,U);
"VALUE" MEAN,SIGMA;
"REAL" MEAN,SIGMA,U;
"BEGIN" "INTEGER" J; "REAL" SUM;
SUM:=0;
"FOR" J:=1 "STEP" 1 "UNTIL" 5 "DO"
SUM:=SUM+XBASERANDOM(U,MULT2);
FASTNORMAL:=MEAN+0.77459667*(SUM/65535.5-5.0)*SIGMA;
"END" FASTNORMAL;







"INTEGER" "PROCEDURE" POISSON(MEAN,U);
"VALUE" MEAN; "REAL" MEAN,U;
"BEGIN" "INTEGER" C; "REAL" A,B,D;
"SWITCH" SS:=LOOPP;
D:=XBASERANDOM(U,MULT2)/131071.0;
A:=B:=EXP(-MEAN);
C:=0;
LOOPP:"IF" B<D "THEN"
"BEGIN" C:=C+1;
A:=A*MEAN/C;
B:=B+A;
"GOTO" LOOPP
"END";
POISSON:=C
"END" POISSON;




"INTEGER" "PROCEDURE" BINOMIAL(N,P,U);
"VALUE" N,P; "INTEGER" N; "REAL" P,U;
"BEGIN" "INTEGER" C; "REAL" A,B,D,E;
"SWITCH" SS:=LOOPB;
E:=XBASERANDOM(U,MULT2)/131071.0;
A:=B:=(1.0-P)^N;
C:=0;
"IF" B<E "THEN"
"BEGIN" D:=P/(1.0-P);
LOOPB:C:=C+1;
B:=B*D*(N+1-C)/C;
A:=A+B;
"IF" C "NE" N "AND" A<E "THEN" "GOTO" LOOPB
"END";
BINOMIAL:=C
"END" BINOMIAL;




"INTEGER" "PROCEDURE" PASCAL(M,P,U);
"VALUE" M,P; "INTEGER" M; "REAL" P,U;
"BEGIN" "INTEGER" B; "REAL" A,C,E,Q;
"SWITCH" SS:=LOOP;
E:=XBASERANDOM(U,MULT2)/131071.0;
A:=C:=P^M;
B:=M; Q:=1.0-P;
LOOP: "IF" C<E "THEN"
"BEGIN" B:=B+1;
A:=A*(B-1)*Q/(B-M);
C:=C+A;
"GOTO" LOOP
"END";
PASCAL:=B
"END" PASCAL;


"REAL" "PROCEDURE" ERLANG(A,K,U);
"VALUE" A,K; "INTEGER" K; "REAL" A,U;
"BEGIN" "INTEGER" J; "REAL" TR,WSP;
"SWITCH" SS:=ZERO;
TR:=1.0;
"FOR" J:=1 "STEP" 1 "UNTIL" K "DO"
"BEGIN" ZERO: WSP:=XBASERANDOM(U,MULT2);
"IF" WSP=0 "THEN" "GOTO" ZERO;
TR:=TR*WSP/131071.0
"END";
ERLANG:=-LN(TR)/A
"END" ERLANG;






"INTEGER" "PROCEDURE" HYPERGEOM(TN,NS,P,U);
"VALUE" NS; "INTEGER" TN,NS; "REAL" P,U;
"BEGIN" "INTEGER" ANS,I,J; "REAL" TEMP;
ANS:=0;
"FOR" I:=1 "STEP" 1 "UNTIL" NS "DO"
"BEGIN" TEMP:=XBASERANDOM(U,MULT2)/131071.0;
"IF" TEMP "LE" P "THEN"
"BEGIN" J:=1; ANS:=ANS+1
"END" "ELSE" J:=0;
P:=(TN*P-J)/(TN-1);
TN:=TN-1
"END";
HYPERGEOM:=ANS
"END" HYPERGEOM;






"COMMENT" END OF RANDOM SAMPLING PROCEDURES;




<! Halt !>



"COMMENT" HISTOGRAM PROCEDURES;




"PROCEDURE" HSTSET(A,N,L,W);"VALUE" N,L,W;"INTEGER" N,L,W;
"INTEGER" "ARRAY" A;
"BEGIN" "INTEGER" I;
A[-7]:=N; A[-6]:=L; A[-5]:=W;
"FOR" I:=-4"STEP" 1 "UNTIL" N "DO" A[I]:=0
"END" HSTSET;



<! Halt !>


"PROCEDURE" HSTPUT(A,X); "VALUE" X; "INTEGER" X; "INTEGER" "ARRAY" A;
"BEGIN" "INTEGER" I;
I:=X-A[-6];
"IF" I<0 "THEN" I:=-1 "ELSE"
"BEGIN" I:=I "DIV" A[-5];
"IF" I>A[-7] "THEN" I:=A[-7]
"END";
A[I]:=A[I]+1;
A[-4]:=A[-4]+1;
A[-3]:=A[-3]+X;
A[-2]:=A[-2]+X*X
"END" HSTPUT;



"PROCEDURE" HSTTRUE(A,M,V); "INTEGER" "ARRAY"A; "REAL" M,V;
"BEGIN" M:=A[-3]/A[-4];
V:=(A[-2]-M*A[-3])/(A[-4]-1)
"END" HSTTRUE;




"PROCEDURE" HSTPRINT(A,DEVOUT);"VALUE" DEVOUT; "INTEGER" DEVOUT; "INTEGER" "ARRAY" A;
"BEGIN" "INTEGER" HOLD,TEMP,TEMP1;
TEMP:=A[-6];
TEMP1:=0;
"PRINT" PUNCH(DEVOUT),‘‘LS8@UNDER    @,SAMELINE,A[-1],‘‘S3@@,A[-1]/A[-4],‘‘S3@@,A[-1]/A[-4];
"FOR" HOLD:=0 "STEP" 1 "UNTIL" (A[-7]-1) "DO"
"BEGIN" TEMP1:=TEMP1+A[HOLD];
"PRINT" PUNCH(DEVOUT),TEMP,‘:@,SAMELINE,TEMP+A[-5]-1,DIGITS(6),A[HOLD],‘‘S3@@,A[HOLD]/A[-4],
‘‘S3@@,TEMP1/A[-4];
TEMP:=TEMP+A[-5]
"END";
"PRINT" PUNCH(DEVOUT),‘‘LS8@OVER     @,SAMELINE,A[A[-7]],‘‘S3@@,A[A[-7]]/A[-4],‘‘S3@1.0000000@
"END" HSTPRINT;



<! Halt !>


"PROCEDURE" HSTGROUP(A,M,V); "INTEGER" "ARRAY" A; "REAL" M,V;
"BEGIN" "INTEGER" TEMP,HOLD,LBCELL,I,K;
"SWITCH" SS:=END1;
K:=A[-7];
"IF" A[-1] "NE" 0 "OR" A[K] "NE" 0 "THEN"
"BEGIN" M:=?78; V:=-1.0; "GOTO" END1
"END";
TEMP:=HOLD:=0; LBCELL:=A[-6];
"FOR" I:=0 "STEP" 1 "UNTIL" K-1 "DO"
"BEGIN" TEMP:=TEMP+LBCELL*A[I];
HOLD:=HOLD+LBCELL*LBCELL*A[I];
LBCELL:=LBCELL+A[-5]
"END";
M:=TEMP/A[-4]+.5*(A[-5]-1);
V:=(HOLD-TEMP*TEMP/A[-4])/(A[-4]-1);
END1:"END" HSTGROUP;




<! Halt !>


"PROCEDURE" HSTWORKS(A,B,C,ADD); "VALUE" ADD; "BOOLEAN" ADD;
"INTEGER" "ARRAY"A,B,C;
"BEGIN" "INTEGER" I;
"SWITCH" SS:=ERROR,END1;
"FOR" I:=-7,-6,-5 "DO" "IF" A[I] "NE" B[I] "OR" A[I] "NE" C[I] "THEN"
"GOTO" ERROR;
"FOR" I:=-4 "STEP" 1 "UNTIL" A[-7] "DO"
"IF" ADD "THEN" C[I]:=A[I]+B[I]
"ELSE" "BEGIN" C[I]:=A[I]-B[I];
"IF" C[I]<0 "THEN" "GOTO" ERROR
"END";
"GOTO" END1;
ERROR:"PRINT" PUNCH(3),‘
ERR4@,STOP;
END1:"END" HSTWORKS;





"PROCEDURE" HSTADD(A,B,C); "INTEGER" "ARRAY" A,B,C;
"BEGIN" HSTWORKS(A,B,C,"TRUE");
"END" HSTADD;




"PROCEDURE" HSTSUB(A,B,C); "INTEGER" "ARRAY" A,B,C;
"BEGIN" HSTWORKS(A,B,C,"FALSE");
"END" HSTSUB;





"PROCEDURE" HSTMULT(A,K,C); "VALUE" K; "INTEGER" K; "INTEGER" "ARRAY" A,C;
"BEGIN" "INTEGER" I;
"IF" A[-7] "NE" C[-7] "OR" A[-6] "NE" C[-6] "OR" A[-5] "NE" C[-5]
"OR" K "LE" 0 "THEN" "PRINT" PUNCH(3),‘
ERR5@,STOP;
"FOR" I:=-4 "STEP" 1 "UNTIL" A[-7] "DO" C[I]:=A[I]*K
"END" HSTMULT;



<! Halt !>


"PROCEDURE" HSTIN(A);
"INTEGER" "ARRAY" A;
"BEGIN" "INTEGER" I,WSP,ALESS7;
"READ" READER(1),ALESS7;
A[-7]:=ALESS7;
"FOR" I:=-6 "STEP" 1 "UNTIL" ALESS7 "DO"
"READ" READER(1),A[I];
"IF" A[-4]=0 "AND" A[-3]=0 "AND" A[-2]=0 "THEN"
"BEGIN" WSP:=A[-6];
A[-4]:=A[-1]+A[ALESS7];
"FOR" I:=0 "STEP" 1 "UNTIL" ALESS7-1 "DO"
"BEGIN" A[-4]:=A[-4]+A[I];
A[-3]:=A[-3]+WSP*A[I];
A[-2]:=A[-2]+WSP*WSP*A[I];
WSP:=WSP+A[-5]
"END"
"END"
"ELSE"
"BEGIN" WSP:=0;
"FOR" I:=-1 "STEP" 1 "UNTIL" ALESS7 "DO"
WSP:=WSP+A[I];
"IF" WSP "NE" A[-4] "THEN" "PRINT" PUNCH(3),‘
ERR6@,STOP
"END"
"END" HSTIN;


"PROCEDURE" HSTOUT(A);
"INTEGER" "ARRAY" A;
"BEGIN" "INTEGER" I;
"FOR" I:=-7 "STEP" 1 "UNTIL" A[-7] "DO"
"PRINT" PUNCH(1),SAMELINE,A[I],‘
@
"END" HSTOUT;


<! Halt !>


"INTEGER" "PROCEDURE" HSTSAMP(A,U); "REAL" U; "INTEGER" "ARRAY" A;
"BEGIN" "INTEGER" R,I,COUNT;
"SWITCH" SS:=AGAIN;
R:=RANDOM(1,A[-4],U); COUNT:=A[-1]; I:=0;
AGAIN: "IF" COUNT<R "THEN"
"BEGIN" COUNT:=COUNT+A[I]; I:=I+1; "GOTO" AGAIN
"END";
"IF" I=0 "THEN" HSTSAMP:=A[-6]-1
"ELSE" HSTSAMP:=A[-6]+(I-1)*A[-5]+("IF" I=A[-7]+1 "THEN" 0
"ELSE" RANDOM(0,A[-5]-1,U))
"END" HSTSAMP;





"COMMENT" END OF HISTOGRAM PROCEDURES;



"COMMENT" 2 EXTRA ENDS SHOULD BE PUT AT THE END OF THE USERS PROGRAM;
<! Halt !>