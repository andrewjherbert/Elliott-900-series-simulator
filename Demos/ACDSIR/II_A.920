
((ALGOL TAPE II, INTERPRETER, 19/5/69)



	8  READAL	( STUDENTS ENTRY :LIBRARY IN STORE)
	8  CONTIN	( CONTINUE AFTER WAIT )
	8  EXECUT	( EXECUTE ALGOL PROGRAM )
	8  7775	( ENTER LOADER TO INPUT RELATED TAPE)
	8  READLB	( ESTABLISH LIBRARY IN STORE )
	8  READOL	( READ PROGRAM OVERWRITING LIBRARY )
	8  ;+0
	8  ;+0
	8  CHNGOP	(MAKE LNPRINTER PRESUMED )
	8  PUNCH1	( RESET PUNCH AS PRESUMED )
	8  ;+0	( 18 )
	+0
	8  ;+0	(20 )

	8  ;+0
	+0
	+0
	+0
	8  ;+0	( 25 )



STKMOD	+0	( START OF STACK OR ZERO )
STKEND	+8177	( MUST BE 7997 IN LATER ISSUES )
WARNAD	+7350
PDADD	+0	( ADDRESS OF END OF INTERPRETER )
STACKADD	+0



BASE	+4100
	+0	(  QACODL  )
	+8191	(  QAVNDA SET BY LOADER )
WARN	+1
PP	+0
SP	+0
EP	+0
FP	+0
BN	+0
	0 PBA

	0  PRIM31	( R+R )
	0  PRIM33	( R-R )
	0  PRIM35	( R*R )
	0  PRIM37	( R/R )
	0  PRIM59	( ENTIER )
	0  DLMULT	( DOUBLE LENGTH MULT. )
	0  DLDIV	( DOUBLE LENGTH DIVIDE )
	0  RRES	( STACK REAL ANSWER )
	0  CHEBY	( POLYNOMIAL CALCULATION )





	0  STAND	( 50.  STANDARDISE )
	0  TABLE
	0  OTCHA
	8  GECH
	0  OSTSB
	8	GARAD
STIM	-1	
T	+0	( WS. FOR CHEBY ARGUMENT )
	+0
CSTART	+0	( START LOCATION OF CONSTANTS FOR CHEBY )
	+0
	+0
C	+0	( NUMBER OF CONSTANTS FOR CHEBY )
	+0
	+0
PAUSRT	0  STOP	( LINK FOR CONTINUE AFTER WAIT )
	8  FAILEN	( JUMP TO FAIL S/R )
SBLNK2	+0
	0	ODEV
	0	GLOPMD
IOLNK	+0
	0	OUTI
	0	OUTR
NEXTCH	+0
	0  STSUBRT
	-1	( LIBDICT )
	+0
	+0
	+0
	+0



W	+74	( WORKSPACES )
W1
TENPWR	+0
W2
NSIGNF	+0
W3	+0
W4	+0
W5	+0
W6	+0
W7
BEFPT	+0
W8	
AFTPT	+0
W9
DECPWR	+0

WS	+0
WS1	+0
WS2	+0
WS3	+0
WS4	+0
WS5	+0
WS6	+0
WS7	+0
WS8	+0
ODEV
WS9	+0
DIGM
WS10	+0
DIGN
WS11	+0
OPMD
WS12	+0
PKDADD
WS13	+0
UNPACKED
WS14	+0
WS15	+0
WS16	+0
WS17	+0
WS18	+0
WS19	+0
WS20	+0
WS21	+0
WS22	+0
WS23	+0
WS24	+0
WS25	+0
WS26	+0
	+0
WS28	+0
WS29	+0

WS30	+0	( 120 )
	+0
WS32	+0
WS33	+0
SBW	+0
	+0
	+0
	+0



COUNT	+0	( WS. FOR I ↑ I = I )
B0	+0	( WS. FOR CHEBY POLYNOMIAL CALCULATION )
	+0
	+0
	+0
	+0
	+0
	+0
	+0
	+0
	+0
	+0
	+0
	+0
	+0
	+0
	+0
	+0
	+0
	+0
	+0
	+0
	+0
B11	+0
	+0
	+0
	+0
	+0
	+0
D	0	D0	( LOG. CONSTANT POINTER )
D0	&140276	( LOG. CONSTANTS  HALF OF +.7529056258 )
	&154240
	&053730	( HALF OF +.3431457505 )
	&146300
	&774166	( HALF OF -.0294372515 )
	&314677
	&000334	( HALF OF +.0033670893 )
	&252304
	&777743	( HALF OF -.0004332759 )
	&232654
	&000003	( HALF OF +.0000594707 )
	&345602
	&777777	( HALF OF -.0000085029 )
	&161260
	&000000	( HALF OF +.0000012504 )
	&024765
	&777777	( HALF OF -.0000001877 )
	&374663
	&000000	( HALF OF +.0000000286 )
	&000366
	&777777	( HALF OF -.0000000044 )
	&377732
	&000000	( HALF OF +.0000000006 )
	&000006


N	+0	( WS. LOCATION FOR EXPONENTIAL )
MKR7	+0	( MARKER FOR I ↑ I = R )
C0	&272375	( EXPONENTIAL CONSTANTS  HALF OF +1.45699875 )
	&361473
	&740121	( HALF OF -.2487624339 )
	&032724
	&002575	( HALF OF +.0214465560 )
	&205401
	&777657	( HALF OF -.0012357141 )
	&004121
	&000003	( HALF OF +.0000534531 )
	&200626
	&777777	( HALF OF -.0000018507 )
	&340747
	&000000	( HALF OF +.0000000534 )
	&000713
	&777777	( HALF OF -.0000000013 )
	&377765
ADDRES	0	C0	( EXPONENTIAL CONSTANT POINTER )

SINGLE	+0		( LINK.  ORGANISATIONAL S/R )

	0	W	( SET POINTER IN B-REG. )

	/4	0	( STORE MANTISSA OF REAL NO. IN W3 W4  )
	5	W3
	/4	1
	5	W4

	/4	2	( STORE EXPONENT OF REAL NO. IN W5 )
	5	W5

	0	SINGLE	( EXIT )
	/8	1




FAIL	+0	( LINK.  ERROR S/R )

	11	PAUSRT	( JUMP TO FAIL S/R WITH ERROR NO. IN ACC. )
	8	FAILEN
	4	W3
	9	;+9	( JUMP IF ANSWER SHOULD HAVE BEEN -VE. )

	4	=15 8191	( OTHERWISE SET PLUS FLOATING POINT   )
	5	W3
	4	&377600
	5	W4
	4	+63
	5	W5

	0	FAIL	( EXIT )
	/8	1

	4	=/0 0	( SET MINUS FLOATING POINT   )
	5	W3
	4	+0
	8	;-8



RSTACK	+0		( LINK.  ORGANISATIONAL S/R )

	0	W	( SET REAL NO. POINTER IN B-REG. )

	/4	0	( STORE MANTISSA OF FIRST REAL NO. IN W3 W4 )
	5	W3
	/4	1
	5	W4

	/4	2	( STORE EXPONENT OF FIRST REAL NO. IN W5 )
	5	W5

	/4	3	( STORE MANTISSA OF SECOND REAL NO. IN W6 W7 )
	5	W6
	/4	4
	5	W7

	/4	5	( STORE EXPONENT OF SECOND REAL NO. IN W8 )
	5	W8

	0	RSTACK	( EXIT )
	/8	1







RRES	+0		( LINK.  ORGANISATIONAL S/R. )

	0	W	( SET RESULT POINTER IN B-REG. )

	4	W3	( STACK MANTISSA OF RESULT )
	/5	0
	4	W4
	/5	1

	4	W5	( STACK EXPONENT OF RESULT )
	/5	2

	0	RRES	( EXIT )
	/8	1



PRIM30	+0		( LINK.  I +I = I )

	0	W	( SET POINTER IN B-REG. )

	/4	0
	9	;+8	( JUMP IF I -VE. )

	/4	3
	9	;+8	( JUMP IF I -VE. )

	/1	0
	9	;+10	( BOTH +VE. JUMP TO ERROR IF ANS. -VE. )

	/5	0	( OTHERWISE STACK ANS. )
	0	PRIM30	( EXIT )
	/8	1

	/4	3
	9	;+3	( JUMP IF BOTH -VE. )

	/1	0	( ONE -VE.  FORM I + I  )
	8	;-6

	/1	0
	9	;-8	( BOTH -VE. JUMP IF ANS. -VE. )

	4	+3
	11	PAUSRT	( FAIL S/R WITH ERROR NO. IN ACC. )
	8	FAILEN
	8	STOP




PRIM32	+0		( LINK.  I - I = I )

	0	W	( SET POINTER IN B-REG. )

	/4	3	( NEGATE I  )
	2	+0
	/5	3	( RESTACK NEGATED I  )

	1	=/0 0
	7	;+4	( JUMP IF NEGATED I  IS -1.0 )

	4	PRIM32	( SET LINK FOR PRIM30 )
	5	PRIM30
	8	PRIM30+2	( EXIT TO PRIM30 )

	/4	0
	9	;+2	( O.K. IF I  -VE. )
	8	PRIM30+17	( OVERFLOW ERROR OTHERWISE )

	/1	3	( FORM I + I IF I = -1.0 )
	/5	0
	0	PRIM32	( EXIT IN THIS CASE )
	/8	1



PRIM34	+0		( LINK.  I MULT. BY I = I )

	0	W	( SET POINTER IN B-REG. )

	/4	0
	/12	3	( FORM I MULT. BY I )
	3	WS1	( STORE A.R. )

	7	;+4	( O.K. IF ACC.=0 OR -1 )
	1	+1
	7	;+6

	8	PRIM30+17	( OVERFLOW ERROR OTHERWISE )

	4	WS1
	/5	0	( STACK RESULT )

	0	PRIM34	( EXIT )
	/8	1

	4	WS1	( FORM CORRECT -VE. RESULT )
	1	=/0 0
	8	;-5


PRIM38	+0		( LINK.  I ↑ I = I )

	0	W	( SET POINTER IN B-REG. )

	/4	0
	7	;+23	( JUMP IF I = 0 TO EXIT )
	5	WS1	( STORE I  )

	/4	3
	9	;+24	( JUMP IF I IS -VE. )
	7	;+21	( JUMP IF I IS ZERO )

	2	+0	( NEGATE I  )
	5	COUNT	( AND STORE AS COUNT )

CALC	10	COUNT	(INCREMENT COUNT & TEST )
	4	COUNT
	7	;+12	( JUMP IF COUNT = 0 I.E. END OF S/R )

	4	WS1
	/12	0	( FORM I ↑ N )
	3	WS1	( STORE A.R. )

	7	CALC	( O.K. IF ACC. IS 0 OR-1 )
	1	+1
	7	;+2
	8	PRIM30+17	( OVERFLOW OTHERWISE )

	4	WS1	( SET CORRECT -VE. RESULT IF ACC. = -1 )
	1	=/0 0
	5	WS1
	8	CALC

	4	WS1	( STACK ANSWER )
	/5	0

	0	PRIM38	( EXIT )
	/8	1

	4	+1	( SET ANS. = +1 IF I = 0 )
	8	;-4

	4	+20	( ERROR NO. 20 IF I -VE. )
	8	PRIM30+18




SET	+0		( LINK. SETTING S/R FOR BOOLEAN RESULTS )

	4	+0	( ENTRY AT SET+1 GIVES +0 AS ANS. )
	0	W
	/5	0	( STACK ANSWER )

	0	SET	( EXIT )
	/8	2

	4	+1	( ENTRY AT SET+6 GIVES +1 AS ANS. )
	8	;-5


PRIM41	+0		( LINK.  I < I  GIVES BOOLEAN RESULT )

	0	W	( SET POINTER IN B-REG. )

	/4	3
	/2	0	( I - I  )

	11	SET	( SET TRUE IF I < I  FALSE OTHERWISE )
	9	SET+6
	8	SET+1

	0	PRIM41	( EXIT )
	/8	1




PRIM43	+0		( LINK.  I < I  GIVES BOOLEAN RESULT )

	0	W	( SET POINTER IN B-REG. )

	/4	0
	/2	3	( I - I )

	11	SET	( SET FALSE IF I > I  TRUE OTHERWISE )
	9	SET+1
	8	SET+6

	0	PRIM43	( EXIT )
	/8	1




PRIM45	+0		( LINK.  I = I GIVES BOOLEAN RESULT )

	0	W	( SET POINTER IN B-REG. )

	/4	0
	/2	3	( I - I )

	11	SET	( SET TRUE IF I = I  FALSE OTHERWISE )
	7	SET+6
	8	SET+1

	0	PRIM45	( EXIT )
	/8	1





PRIM47	+0		( LINK.  I = I  GIVES BOOL. RESULT )

	0	W	( SET POINTER IN B-REG. )

	/4	0
	/2	3	( I - I )

	11	SET	( SET FALSE IF I = I  TRUE OTHERWISE )
	7	SET+1
	8	SET+6

	0	PRIM47	( EXIT )
	/8	1




PRIM49	+0		( LINK.  I > I  GIVES BOOL. RESULT )

	0	W	( SET POINTER IN B-REG. )

	/4	0
	/2	3	( I - I )

	11	SET	( SET TRUE IF I > I  FALSE OTHERWISE )
	9	SET+6
	8	SET+1

	0	PRIM49	( EXIT )
	/8	1




PRIM51	+0		( LINK.  I > I  GIVES BOOL. RESULT )

	0	W	( SET POINTER IN B-REG. )

	/4	3
	/2	0	( I - I )

	11	SET	( SET FALSE IF I > I  TRUE OTHERWISE )
	9	SET+1
	8	SET+6

	0	PRIM51	( EXIT )
	/8	1





SBLNK
STAND	+0		( LINK  STANDARDISE W3 W4 W5 )

	4	+0	( SET COUNT ZERO )
	5	SBW

	4	W3
	7	STAND3	( JUMP IF MOST SIGNIFICANT MANTISSA = 0 )

	9	STAND4	( JUMP IF MOST SIGNIFICANT MANTISSA IS -VE. )

STAND1	14	1	( SHIFT MANTISSA UNTIL -VE. )
	9	STAND2
	10	SBW	( INCREMENT COUNT FOR EACH LEFT SHIFT )
	8	STAND1

STAND7	4	+0	( SET REAL ZERO IF EXPONENT < -64 )
	5	W3
	5	W4
STAND5	5	W5
	8	STAND6

STAND3	4	+17	( SET COUNT IF MOST SIGNIFICANT MANTISSA = 0 )
	5	SBW

	4	W4
	7	STAND5	( JUMP IF LEAST SIGNIFICANT MANTISSA = 0 )
	8	STAND1




STAND4	1	+1	( JUMP IF MOST SIGNIFICANT MANTISSA = -1 )
	7	;+3
	4	W3
	8	;+5

	4	+16	( SET COUNT )
	5	SBW

	4	W4	( SHIFT NEGATIVE MANTISSA UNTIL SIGN CHANGES )
	10	SBW
	14	1
	9	;-2

STAND2	4	SBW
SHIFTD	5	SBW
	2	W5
	5	W5	( OTHERWISE ADJUST EXPONENT )
	1	+64
	9	STAND7	( JUMP IF EXPONENT < -64 )

	1	-128
	9	;+5
	4	SBLNK
	5	FAIL
	4	+9	( ERROR NO. 9 IF EXPONENT IS TOO LARGE )
	8	FAIL+1

	4	SBW
	7	STAND6	( EXIT IF COUNT IS ZERO )
	6	+8191	( FORM SHIFT INSTRUCTION )
	1	SHFT1
	5	SHIFTN

	0	W4
	14	1	( SET W3 W4 IN ACC. & A.R. )
	4	W3
SHIFTN	+0		( SHIFT W3 W4 & RESTORE )
	3	W4
	5	W3

STAND6	0	SBLNK	( EXIT )
	/8	1
SHFT1	14	0	( CONST TO FORM SHIFT INSTRUCTION )

<! Halt !>