C Demonstrate working with fixed point fractions
C using ACD routines

on 903 8K

c load assembler
at ptr file SIR1P71.BIN
j 8181
st 8175

c main program
telecode 920
select out tty
nonprinting off

at ptr inline 920 mode3

*19

((A J HERBERT -- 03/03/12				   )
((Program to demonstrate working with fixed point fractions)

(Summary of QSIO routines		                  )
(							  )
( QIN1+1: integer or fraction input       		  )
( Error 1: format error				          )
(							  )
( QOUT1+1: integer output				  )
( QOUT1+2: fraction output				  )
( QOUT1+3: octal output					  )
( parameter word 	                                  )
( / = newline, otherwise sameline               	  )
( f = width 6-f digits                        	          )
( n = scaling factor                            	  )
( integer occupies 7-f positions, fraction or mixed 8-f   )
(                                                         )
( Error 1: number cannot be express in specified format   )
(	   after scaling				  )
(						          )
(Summary of QSMATH routines				  )
(							  )
( QATAN+1: calculate [1/pi] arctan [x/y]		  )
(	argument x in QATAN+89				  )
(	argument y in QATAN+90                            )
(       result in accumulator                             )
(	QSM ERROR 2 if x=y=0				  )
(							  )
( QEXP+1: calculate exp [2^p x]				  )
(	x in accumulator				  )
(	p in QEXP+53					  )
(	result in accumulator and QEXP+54                 )
(       x saved in QEXP+52, p overwritten                 )
(	QSM ERROR 4 if x >= 0 or p < 0			  )
(							  )
( QLN+1: calculate 1/16 ln x				  )
(	argument in accumulator                           )
(	result in accumulator and QLN+52                  )
(	QSM ERROR 3 if x <= 0				  )	
(							  )
( QSIN+1: calculate 0.5 sin pi x and 0.5 cos pi x         )
(	x in accumulator				  )
(	result 0.5 sin pi x in accumulator and QSIN+67    )
(	result 0.5 cos pi x in QSIN+68                    )
(							  )
( QSQRT+1: calculate square root - double length working  )
(       argument [l.s.] in QSQRT+3                        )
(       argument [m.s.] in accumulator                    )
(	result in accumulator and QSQRT+45                )
(	argument saved in QSQRT+4 [m.s.]                  )
( 	and QSQRT+3 [l.s.]                                )
( QSQRT+2: calculate square root - single length working  )
(       argument in accumulator                           )
(       result in accumulator and QSQRT+45                )
(	argument saved in QSQRT+4                         )
(	QSM ERROR 1 if argument < 0			  )
(						          )
(Summary of OPTIMATH routines				  )
(							  )
( SINL&SINE: calculate 0.5 sin p x			  )
(	x in accumulator				  )
(						          )
( COSL&COSE: calculate 0.5 cos pi x			  )
(	x in accumulator				  )
(						          )
( SICOL&SICOE: calculate 0.5 sin pi x and 0.5 cos pi x    )
(	x in accumulator				  )
(	result 0.5 sin pi x in SICOS		          )
(	result 0.5 cos pi x in accumulator                )
(							  )
( SSSRL&SSSRE: calculate square root - single length      )
(	working						  )
(	argument in accumulator 			  )
(	negative argument treated as 0			  )
(	result in accumulator and DSSRA		  	  )
(					 		  )
( DSSRL&DSSRE: calculate square root - double length      )
(	working						  )
(	argument [m.s.] in DSSRA 			  )
(	argument [l.s.] in DSSRA+1 = DSSRQ		  )
(	negative argument treated as 0			  )
(	result in accumulator		  		  )
(						          )
( PYTHL&PYTHE: calculate sqrt [accumulator^2 + PYTHB^2]   )
(	result in accumulator				  )
(	accumulator^2 + PYTHB^2 in DSSRA, DSSRA+1         )
(						          )
( ATANL&ATANE: calculate [1/pi] arctan [x/y]		  )
(	argument x in accumulator			  )
(	argument y in ATANC                               )
(       result in accumulator                             )
(	result = 0 if x=y=0				  )

[~MAIN 
 CHIPF CHOPF CHOPC
 ~NEWLINE ~OUTSTR 
 ~MATHS]

(set up interrupt handling)
<	4	L2ENT
	5	2
	4	L3ENT
	5	4
	4	L4ENT
	5	6
IGNORE	15	7168
	8	;-1		(ignore interrupts)
L2ENT
L3ENT	0 IGNORE
L4ENT	0 MAIN

MAIN 	4 	+0		(initialize input and output)
	5 	CHIPF
	5	CHOPF
	5	CHOPC		(select 920 telecode for output)
	11 	NEWLIN		(output title)
	8 	NEWLIN+2
	11 	OUTSTR
	8	OUTSTR+1
	£FIX
	£ED
	£POI
	£NT
	£ARI
	£THM
	£ETI
	£C D
	£EMO
	£ AJ
	£ HE
	£RBE
	£RT
	£03/
	£03/
	£12^

[G13L G13E G13Y NEWLIN OUTSTR QIN1 QOUT1 MATHS]

(show guarded division)
	11	NEWLIN
	8	NEWLIN+2
	11	OUTSTR
	8	OUTSTR+1
	£GUA
	£RDE
	£D D
	£IVI
	£SIO
	£N^
	11	NEWLIN
	8	NEWLIN+1

	(read count)
	11	QIN1
	8	QIN1+1
	2	+0
	5	COUNT

	(for i := 1 until count do)
LOOP	9	;+2
	8	MATHS
	11	NEWLIN		(print newline)
	8	NEWLIN+1
	11	QIN1		(read x)
	8	QIN1+1
	5	X
	11	QOUT1		(print x)
	8	QOUT1+2
	0 0
	11	OUTSTR
	8	OUTSTR+1
	£ /^
	11	QIN1		(read y)
	8	QIN1+1
	5	G13Y
	11	QOUT1		(print y)
	8	QOUT1+2
	0 0
	11	OUTSTR
	8	OUTSTR+1
	£ =^
	4	X
	11	G13L		(guarded division)
	8	G13E
	11	QOUT1		(print result)
	8	QOUT1+2
	0 0
	10	COUNT
	4	COUNT
	8	LOOP	

COUNT	>1
X	>1

[MATHS QIN1 QOUT1 QSQRT QLN QEXP QSIN QATAN 
 SSSRL SSSRE SICOL SICOE SICOS ATANL ATANE ATANC
 CHOPE CHOPL
 OUTSTR NEWLINE]

(maths functions)

MATHS	11 	NEWLIN
	8 	NEWLIN+2
	11	OUTSTR
	8	OUTSTR+1
	£SIN
	£GLE
	£ LE
	£NGT
	£H M
	£ATH
	£S F
	£UNC
	£TIO
	£NS^

	11 	NEWLIN
	8	NEWLIN+2
	11	OUTSTR
	8	OUTSTR+1
	£
	£
	£INP
	£UT
	£
	£ 
	£ X 
	£ 
 	£ SQ
	£RT(
	£X)
	£ LN
	£(X)
	£/16
	£
	£  E
	£XP(
	£-X)
	£  
	£SIN
	£(X)
	£   
	£ CO
	£S(X
	£)^
	11	NEWLIN
	8 	NEWLIN+1

(qsmath routines)
MORE	11	QIN1		(read a number)
	8	QIN1+1
	7	ATAN		(terminate on zero)
	5	NUMBER
	11	NEWLIN
	8	NEWLIN+1
	11	OUTSTR		(QSMATH routines)
	8	OUTSTR
	£QS 
	£^
	4	NUMBER
	11	QOUT1
	8	QOUT1+2
	0 0			(newline, digits[6])
ADJUST	4	NUMBER
	11	ABS
	8	ABS+1
	5	ABSNUM
	11 	QOUT1		
	8	QOUT1+2
	0 0			(sameline, digits[6])
	
	4	ABSNUM
	11	QSQRT		(square root, single length working)
	8	QSQRT+2
	11 	QOUT1		(integer)
	8	QOUT1+2
	0 0			(sameline, digits[6])

	4	ABSNUM
	11	QLN		(natural logarithm: ln x / 16)
	8	QLN+1
	11	QOUT1
	8	QOUT1+2
	0 0			(sameline, digits[6])

	4	+0
	5	QEXP+53		(exponential: exp -x)
	4	NUMBER
	9	;+2
	2	+0
	11 	QEXP
	8	QEXP+1
	11	QOUT1
	8	QOUT1+2
	0 0			(sameline, digits[6])

	4	NUMBER
	11	QSIN		(sine: 0.5 sin pi x)
	8	QSIN+1
	11	QOUT1
	8	QOUT1+2
	0 0			(sameline, digits[6])
	4	QSIN+68
	11	QOUT1
	8	QOUT1+2
	0	0		(sameline, digits[6])

(optimath routines)
	11	NEWLIN
	8	NEWLIN+1
	11	OUTSTR		
	8	OUTSTR
	£OP
	£^
	4	-2528
	11	CHOPL
	8	CHOPE
	
	4	ABSNUM
	11	SSSRL		(square root, single length working)
	8	SSSRE
	11 	QOUT1		(integer)
	8	QOUT1+2
	0 0			(sameline, digits[6])

	4	-2528		(no optimised ln or exp function)
	11	CHOPL
	8	CHOPE

	4	NUMBER
	11	SICOL		(sine: 0.5 sin pi x)
	8	SICOE
	5	W
	4	SICOS
	11	QOUT1
	8	QOUT1+2
	0 0			(sameline, digits[6])
	4	W
	11	QOUT1
	8	QOUT1+2
	0 0			(sameline, digits[6])
	8 	MORE

ATAN	11	NEWLIN
	8	NEWLIN+2
	11 	OUTSTR
	8	OUTSTR+1 
	£ 
	£   
	£ 
	£  
	£ IN
	£PUT
	£
	£
	£1/P
	£I A
	£TAN
	£(X)
	£^

(qsmath routines)
LOOP	11	QIN1		(read next pair)
	8	QIN1+1
	7	NOMORE
	5	X
	11	NEWLIN
	8	NEWLIN+1
	11	OUTSTR
	8	OUTSTR+1
	£QS
	£^
	4	X
	5	QATAN+89	(x)
	11	QOUT1
	8	QOUT1+2
	0 0			(newline, digits[6])
GETY	11	QIN1
	8	QIN1+1
	5	Y
	5	QATAN+90	(y)
	11	QOUT1
	8	QOUT1+2
	0 0			(sameline, digits[6])
CALC	11 	QATAN		(1/pi arctan x/y)
	8 	QATAN+1
	11 	QOUT1
	8	QOUT1+2
	0 0			(sameline, digits[6])

(optimath routines)
	11	NEWLIN
	8	NEWLIN+1
	11	OUTSTR
	8	OUTSTR+1
	£OP
	£^
	4	-2528
	11	CHOPL
	8	CHOPE
	
	4	Y
	5	ATANC
	4	X
	11 	ATANL		(1/pi arctan x/y)
	8 	ATANE
	11 	QOUT1
	8	QOUT1+2
	0 0			(sameline, digits[6])
	8	LOOP

NOMORE	11	NEWLIN
	8	NEWLIN+2
	11	OUTSTR
	8	OUTSTR+1
	£END
	£^

	8 	;+0		(end of program)

( abs function)
ABS	+0
	7	;+3
	9	NEG
	0	ABS
	/8	1
NEG	2	+0
	8	;-3
	

NUMBER	
X	>1
ABSNUM	
Y	
W	>1

(Guarded Division routine from T. Froggatt archive  ~MISCMATH~)

((GUARDED DIVISION SUBROUTINE, 13/12/67)

(Divides two single-length numbers,
but saturates wherever overflow would occur)

[G13L G13E G13Y]

G13L      >1
G13X      >1
G13Y      >1
MODX      >1

G13E      5     G13X
          9     ;+2
          8     ;+3
          2     +0
          9     XBOO
          5     MODX

          4     G13Y
          9     ;+2
          8     ;+3
          2     +0
          9     YBOO

          2     MODX
          9     OK

          4     G13X
          12    G13Y
TEST      9     ;+3
          4     &377777
          8     EXIT
          4     &400000
          8     EXIT

OK        0     +0
          4     G13X
          13    G13Y

EXIT      0     G13L
          /8    1

XBOO      4     G13Y
          1     &400000
          8     TEST

YBOO      4     G13X
          2     +0
          8     EXIT

[NEWLINE CHOPL CHOPE]

(subroutine to output a sequence of newlines)
(enter at NEWLIN+1  for one newline         )
(enter at NEWLIN+2  for two newlines        )
(with count in accumulator                  )

NEWLIN	+0
	8	ONE		(one newline)
	4 	-246		(two newlines)
OP	11 	CHOPL
	8 	CHOPE
EXIT	0 	NEWLIN
	/8 	1

ONE	4	-118
	8   	OP

[OUTSTRI CHOPL CHOPE]

(subroutine to output a string)

OUTSTR 	+0
LOOP	0 	OUTSTR
	/4 	1		(next word in string)
	14 	8180		(first char)
	6 	+63
	1 	-1
	7 	EXIT
	1 	+33		(convert to ACD internal code)
	11 	CHOPL
	8 	CHOPE
	0 	OUTSTR
	/4 	1
	14 	8186
	6 	+63		(second char)
	1 	-1
	7 	EXIT
	1 	+33
	11 	CHOPL
	8 	CHOPE
	0 	OUTSTR
	/4 	1
	6 	+63		(third char)
	1 	-1
	7 	EXIT
	1 	+33
	11 	CHOPL
	 8 	CHOPE
	10 	OUTSTR
	8 	LOOP
EXIT	0 	OUTSTR
	/8 	2
<! halt !>
<!!>

c assemble main program
j &17741
st 6852

c assemble chiol
at ptr file CHIOL.900
j &17742
st 6852

c assemble intip
at ptr file INTIP.900
j &17742
st 6852

c assemble slop_sit
at ptr file SLOP_SIT.900
j &17742
st 6852

c assemble adop
at ptr file ADOP.900
j &17742
st 6852

c assemble qsio
at ptr file QSIO.900
j &17742
st 6852

c assemble qsmath
at ptr file QSMATH.900
j &17742
st 6852

c assemble optimath
at ptr file OPTIMATH.900
j &17742
st 6852

c finish assembly
at ptr inline

%
<! halt !>
<!!>
j &17742
st 7573

c run
at ptr inline 920 mode3

data for guarded division
+9 
+.2 +.4
-.2 +.4
+.2 -.4
-.2 -.4
+.4 +.2
-.4 +.2
+.4 -.2
-.4 -.4
+.0 +.0

data for maths functions, terminated by zero
+.75
-.666666
+.5
+.333333
+.25
-.125
+.1
+.01
-.001
+.0001
+.00001
+0

data for atan terminated by zero
+.5 +.5
+.1 +.3
-.1 +.3
-.1 -0.3
+123456 +.5
+.5 +123456
-123456 +.5
+.5 -123456
-123456 -123456
+0

<! halt !>
<!!>

C trigger program
j &17743
st 288
sh t


